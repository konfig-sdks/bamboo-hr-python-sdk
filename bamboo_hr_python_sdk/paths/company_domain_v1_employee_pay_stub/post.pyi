# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from bamboo_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from bamboo_hr_python_sdk.api_response import AsyncGeneratorResponse
from bamboo_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401

from bamboo_hr_python_sdk.model.employee_paystub_wages import EmployeePaystubWages as EmployeePaystubWagesSchema
from bamboo_hr_python_sdk.model.employee_paystub_deductions import EmployeePaystubDeductions as EmployeePaystubDeductionsSchema
from bamboo_hr_python_sdk.model.employee_paystub_taxes import EmployeePaystubTaxes as EmployeePaystubTaxesSchema
from bamboo_hr_python_sdk.model.employee_paystub import EmployeePaystub as EmployeePaystubSchema
from bamboo_hr_python_sdk.model.employee_paystub_deposits import EmployeePaystubDeposits as EmployeePaystubDepositsSchema

from bamboo_hr_python_sdk.type.employee_paystub_taxes import EmployeePaystubTaxes
from bamboo_hr_python_sdk.type.employee_paystub import EmployeePaystub
from bamboo_hr_python_sdk.type.employee_paystub_deductions import EmployeePaystubDeductions
from bamboo_hr_python_sdk.type.employee_paystub_wages import EmployeePaystubWages
from bamboo_hr_python_sdk.type.employee_paystub_deposits import EmployeePaystubDeposits

from ...api_client import Dictionary
from bamboo_hr_python_sdk.pydantic.employee_paystub_deductions import EmployeePaystubDeductions as EmployeePaystubDeductionsPydantic
from bamboo_hr_python_sdk.pydantic.employee_paystub import EmployeePaystub as EmployeePaystubPydantic
from bamboo_hr_python_sdk.pydantic.employee_paystub_wages import EmployeePaystubWages as EmployeePaystubWagesPydantic
from bamboo_hr_python_sdk.pydantic.employee_paystub_deposits import EmployeePaystubDeposits as EmployeePaystubDepositsPydantic
from bamboo_hr_python_sdk.pydantic.employee_paystub_taxes import EmployeePaystubTaxes as EmployeePaystubTaxesPydantic

# Path params
CompanyDomainSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'companyDomain': typing.Union[CompanyDomainSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_domain = api_client.PathParameter(
    name="companyDomain",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyDomainSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = EmployeePaystubSchema


request_body_employee_paystub = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


class BaseApi(api_client.Api):

    def _add_employee_paystub_mapped_args(
        self,
        company_domain: str,
        employee_id: typing.Optional[str] = None,
        external_record_id: typing.Optional[str] = None,
        pay_period_from: typing.Optional[str] = None,
        pay_period_to: typing.Optional[str] = None,
        pay_date: typing.Optional[str] = None,
        payor_name: typing.Optional[str] = None,
        payor_add1: typing.Optional[str] = None,
        payor_add2: typing.Optional[str] = None,
        payor_city: typing.Optional[str] = None,
        payor_state: typing.Optional[str] = None,
        payor_zip: typing.Optional[str] = None,
        payee_name: typing.Optional[str] = None,
        currency_code: typing.Optional[str] = None,
        net: typing.Optional[str] = None,
        gross: typing.Optional[str] = None,
        total_taxes: typing.Optional[str] = None,
        total_deductions: typing.Optional[str] = None,
        ytd_net: typing.Optional[str] = None,
        ytd_gross: typing.Optional[str] = None,
        ytd_taxes: typing.Optional[str] = None,
        ytd_deductions: typing.Optional[str] = None,
        fed_witholding: typing.Optional[str] = None,
        federal_type: typing.Optional[str] = None,
        two_jobs: typing.Optional[str] = None,
        dependents_amount: typing.Optional[str] = None,
        other_income: typing.Optional[str] = None,
        deductions_amount: typing.Optional[str] = None,
        state_withholding: typing.Optional[str] = None,
        local_withholding: typing.Optional[str] = None,
        additional_fed: typing.Optional[str] = None,
        additional_state: typing.Optional[str] = None,
        additional_local: typing.Optional[str] = None,
        tax_state: typing.Optional[str] = None,
        tax_local: typing.Optional[str] = None,
        wages: typing.Optional[EmployeePaystubWages] = None,
        taxes: typing.Optional[EmployeePaystubTaxes] = None,
        deductions: typing.Optional[EmployeePaystubDeductions] = None,
        deposits: typing.Optional[EmployeePaystubDeposits] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if employee_id is not None:
            _body["employeeId"] = employee_id
        if external_record_id is not None:
            _body["externalRecordId"] = external_record_id
        if pay_period_from is not None:
            _body["payPeriodFrom"] = pay_period_from
        if pay_period_to is not None:
            _body["payPeriodTo"] = pay_period_to
        if pay_date is not None:
            _body["payDate"] = pay_date
        if payor_name is not None:
            _body["payorName"] = payor_name
        if payor_add1 is not None:
            _body["payorAdd1"] = payor_add1
        if payor_add2 is not None:
            _body["payorAdd2"] = payor_add2
        if payor_city is not None:
            _body["payorCity"] = payor_city
        if payor_state is not None:
            _body["payorState"] = payor_state
        if payor_zip is not None:
            _body["payorZip"] = payor_zip
        if payee_name is not None:
            _body["payeeName"] = payee_name
        if currency_code is not None:
            _body["currencyCode"] = currency_code
        if net is not None:
            _body["net"] = net
        if gross is not None:
            _body["gross"] = gross
        if total_taxes is not None:
            _body["totalTaxes"] = total_taxes
        if total_deductions is not None:
            _body["totalDeductions"] = total_deductions
        if ytd_net is not None:
            _body["ytdNet"] = ytd_net
        if ytd_gross is not None:
            _body["ytdGross"] = ytd_gross
        if ytd_taxes is not None:
            _body["ytdTaxes"] = ytd_taxes
        if ytd_deductions is not None:
            _body["ytdDeductions"] = ytd_deductions
        if fed_witholding is not None:
            _body["fedWitholding"] = fed_witholding
        if federal_type is not None:
            _body["federalType"] = federal_type
        if two_jobs is not None:
            _body["twoJobs"] = two_jobs
        if dependents_amount is not None:
            _body["dependentsAmount"] = dependents_amount
        if other_income is not None:
            _body["otherIncome"] = other_income
        if deductions_amount is not None:
            _body["deductionsAmount"] = deductions_amount
        if state_withholding is not None:
            _body["stateWithholding"] = state_withholding
        if local_withholding is not None:
            _body["localWithholding"] = local_withholding
        if additional_fed is not None:
            _body["additionalFed"] = additional_fed
        if additional_state is not None:
            _body["additionalState"] = additional_state
        if additional_local is not None:
            _body["additionalLocal"] = additional_local
        if tax_state is not None:
            _body["taxState"] = tax_state
        if tax_local is not None:
            _body["taxLocal"] = tax_local
        if wages is not None:
            _body["wages"] = wages
        if taxes is not None:
            _body["taxes"] = taxes
        if deductions is not None:
            _body["deductions"] = deductions
        if deposits is not None:
            _body["deposits"] = deposits
        args.body = _body
        if company_domain is not None:
            _path_params["companyDomain"] = company_domain
        args.path = _path_params
        return args

    async def _aadd_employee_paystub_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Add an employee&#x27;s paystub
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_domain,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/{companyDomain}/v1/employee_pay_stub',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_employee_paystub.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _add_employee_paystub_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Add an employee&#x27;s paystub
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_domain,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/{companyDomain}/v1/employee_pay_stub',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_employee_paystub.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class AddEmployeePaystubRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aadd_employee_paystub(
        self,
        company_domain: str,
        employee_id: typing.Optional[str] = None,
        external_record_id: typing.Optional[str] = None,
        pay_period_from: typing.Optional[str] = None,
        pay_period_to: typing.Optional[str] = None,
        pay_date: typing.Optional[str] = None,
        payor_name: typing.Optional[str] = None,
        payor_add1: typing.Optional[str] = None,
        payor_add2: typing.Optional[str] = None,
        payor_city: typing.Optional[str] = None,
        payor_state: typing.Optional[str] = None,
        payor_zip: typing.Optional[str] = None,
        payee_name: typing.Optional[str] = None,
        currency_code: typing.Optional[str] = None,
        net: typing.Optional[str] = None,
        gross: typing.Optional[str] = None,
        total_taxes: typing.Optional[str] = None,
        total_deductions: typing.Optional[str] = None,
        ytd_net: typing.Optional[str] = None,
        ytd_gross: typing.Optional[str] = None,
        ytd_taxes: typing.Optional[str] = None,
        ytd_deductions: typing.Optional[str] = None,
        fed_witholding: typing.Optional[str] = None,
        federal_type: typing.Optional[str] = None,
        two_jobs: typing.Optional[str] = None,
        dependents_amount: typing.Optional[str] = None,
        other_income: typing.Optional[str] = None,
        deductions_amount: typing.Optional[str] = None,
        state_withholding: typing.Optional[str] = None,
        local_withholding: typing.Optional[str] = None,
        additional_fed: typing.Optional[str] = None,
        additional_state: typing.Optional[str] = None,
        additional_local: typing.Optional[str] = None,
        tax_state: typing.Optional[str] = None,
        tax_local: typing.Optional[str] = None,
        wages: typing.Optional[EmployeePaystubWages] = None,
        taxes: typing.Optional[EmployeePaystubTaxes] = None,
        deductions: typing.Optional[EmployeePaystubDeductions] = None,
        deposits: typing.Optional[EmployeePaystubDeposits] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._add_employee_paystub_mapped_args(
            company_domain=company_domain,
            employee_id=employee_id,
            external_record_id=external_record_id,
            pay_period_from=pay_period_from,
            pay_period_to=pay_period_to,
            pay_date=pay_date,
            payor_name=payor_name,
            payor_add1=payor_add1,
            payor_add2=payor_add2,
            payor_city=payor_city,
            payor_state=payor_state,
            payor_zip=payor_zip,
            payee_name=payee_name,
            currency_code=currency_code,
            net=net,
            gross=gross,
            total_taxes=total_taxes,
            total_deductions=total_deductions,
            ytd_net=ytd_net,
            ytd_gross=ytd_gross,
            ytd_taxes=ytd_taxes,
            ytd_deductions=ytd_deductions,
            fed_witholding=fed_witholding,
            federal_type=federal_type,
            two_jobs=two_jobs,
            dependents_amount=dependents_amount,
            other_income=other_income,
            deductions_amount=deductions_amount,
            state_withholding=state_withholding,
            local_withholding=local_withholding,
            additional_fed=additional_fed,
            additional_state=additional_state,
            additional_local=additional_local,
            tax_state=tax_state,
            tax_local=tax_local,
            wages=wages,
            taxes=taxes,
            deductions=deductions,
            deposits=deposits,
        )
        return await self._aadd_employee_paystub_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def add_employee_paystub(
        self,
        company_domain: str,
        employee_id: typing.Optional[str] = None,
        external_record_id: typing.Optional[str] = None,
        pay_period_from: typing.Optional[str] = None,
        pay_period_to: typing.Optional[str] = None,
        pay_date: typing.Optional[str] = None,
        payor_name: typing.Optional[str] = None,
        payor_add1: typing.Optional[str] = None,
        payor_add2: typing.Optional[str] = None,
        payor_city: typing.Optional[str] = None,
        payor_state: typing.Optional[str] = None,
        payor_zip: typing.Optional[str] = None,
        payee_name: typing.Optional[str] = None,
        currency_code: typing.Optional[str] = None,
        net: typing.Optional[str] = None,
        gross: typing.Optional[str] = None,
        total_taxes: typing.Optional[str] = None,
        total_deductions: typing.Optional[str] = None,
        ytd_net: typing.Optional[str] = None,
        ytd_gross: typing.Optional[str] = None,
        ytd_taxes: typing.Optional[str] = None,
        ytd_deductions: typing.Optional[str] = None,
        fed_witholding: typing.Optional[str] = None,
        federal_type: typing.Optional[str] = None,
        two_jobs: typing.Optional[str] = None,
        dependents_amount: typing.Optional[str] = None,
        other_income: typing.Optional[str] = None,
        deductions_amount: typing.Optional[str] = None,
        state_withholding: typing.Optional[str] = None,
        local_withholding: typing.Optional[str] = None,
        additional_fed: typing.Optional[str] = None,
        additional_state: typing.Optional[str] = None,
        additional_local: typing.Optional[str] = None,
        tax_state: typing.Optional[str] = None,
        tax_local: typing.Optional[str] = None,
        wages: typing.Optional[EmployeePaystubWages] = None,
        taxes: typing.Optional[EmployeePaystubTaxes] = None,
        deductions: typing.Optional[EmployeePaystubDeductions] = None,
        deposits: typing.Optional[EmployeePaystubDeposits] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._add_employee_paystub_mapped_args(
            company_domain=company_domain,
            employee_id=employee_id,
            external_record_id=external_record_id,
            pay_period_from=pay_period_from,
            pay_period_to=pay_period_to,
            pay_date=pay_date,
            payor_name=payor_name,
            payor_add1=payor_add1,
            payor_add2=payor_add2,
            payor_city=payor_city,
            payor_state=payor_state,
            payor_zip=payor_zip,
            payee_name=payee_name,
            currency_code=currency_code,
            net=net,
            gross=gross,
            total_taxes=total_taxes,
            total_deductions=total_deductions,
            ytd_net=ytd_net,
            ytd_gross=ytd_gross,
            ytd_taxes=ytd_taxes,
            ytd_deductions=ytd_deductions,
            fed_witholding=fed_witholding,
            federal_type=federal_type,
            two_jobs=two_jobs,
            dependents_amount=dependents_amount,
            other_income=other_income,
            deductions_amount=deductions_amount,
            state_withholding=state_withholding,
            local_withholding=local_withholding,
            additional_fed=additional_fed,
            additional_state=additional_state,
            additional_local=additional_local,
            tax_state=tax_state,
            tax_local=tax_local,
            wages=wages,
            taxes=taxes,
            deductions=deductions,
            deposits=deposits,
        )
        return self._add_employee_paystub_oapg(
            body=args.body,
            path_params=args.path,
        )

class AddEmployeePaystub(BaseApi):

    async def aadd_employee_paystub(
        self,
        company_domain: str,
        employee_id: typing.Optional[str] = None,
        external_record_id: typing.Optional[str] = None,
        pay_period_from: typing.Optional[str] = None,
        pay_period_to: typing.Optional[str] = None,
        pay_date: typing.Optional[str] = None,
        payor_name: typing.Optional[str] = None,
        payor_add1: typing.Optional[str] = None,
        payor_add2: typing.Optional[str] = None,
        payor_city: typing.Optional[str] = None,
        payor_state: typing.Optional[str] = None,
        payor_zip: typing.Optional[str] = None,
        payee_name: typing.Optional[str] = None,
        currency_code: typing.Optional[str] = None,
        net: typing.Optional[str] = None,
        gross: typing.Optional[str] = None,
        total_taxes: typing.Optional[str] = None,
        total_deductions: typing.Optional[str] = None,
        ytd_net: typing.Optional[str] = None,
        ytd_gross: typing.Optional[str] = None,
        ytd_taxes: typing.Optional[str] = None,
        ytd_deductions: typing.Optional[str] = None,
        fed_witholding: typing.Optional[str] = None,
        federal_type: typing.Optional[str] = None,
        two_jobs: typing.Optional[str] = None,
        dependents_amount: typing.Optional[str] = None,
        other_income: typing.Optional[str] = None,
        deductions_amount: typing.Optional[str] = None,
        state_withholding: typing.Optional[str] = None,
        local_withholding: typing.Optional[str] = None,
        additional_fed: typing.Optional[str] = None,
        additional_state: typing.Optional[str] = None,
        additional_local: typing.Optional[str] = None,
        tax_state: typing.Optional[str] = None,
        tax_local: typing.Optional[str] = None,
        wages: typing.Optional[EmployeePaystubWages] = None,
        taxes: typing.Optional[EmployeePaystubTaxes] = None,
        deductions: typing.Optional[EmployeePaystubDeductions] = None,
        deposits: typing.Optional[EmployeePaystubDeposits] = None,
        validate: bool = False,
        **kwargs,
    ) -> None:
        raw_response = await self.raw.aadd_employee_paystub(
            company_domain=company_domain,
            employee_id=employee_id,
            external_record_id=external_record_id,
            pay_period_from=pay_period_from,
            pay_period_to=pay_period_to,
            pay_date=pay_date,
            payor_name=payor_name,
            payor_add1=payor_add1,
            payor_add2=payor_add2,
            payor_city=payor_city,
            payor_state=payor_state,
            payor_zip=payor_zip,
            payee_name=payee_name,
            currency_code=currency_code,
            net=net,
            gross=gross,
            total_taxes=total_taxes,
            total_deductions=total_deductions,
            ytd_net=ytd_net,
            ytd_gross=ytd_gross,
            ytd_taxes=ytd_taxes,
            ytd_deductions=ytd_deductions,
            fed_witholding=fed_witholding,
            federal_type=federal_type,
            two_jobs=two_jobs,
            dependents_amount=dependents_amount,
            other_income=other_income,
            deductions_amount=deductions_amount,
            state_withholding=state_withholding,
            local_withholding=local_withholding,
            additional_fed=additional_fed,
            additional_state=additional_state,
            additional_local=additional_local,
            tax_state=tax_state,
            tax_local=tax_local,
            wages=wages,
            taxes=taxes,
            deductions=deductions,
            deposits=deposits,
            **kwargs,
        )
    
    
    def add_employee_paystub(
        self,
        company_domain: str,
        employee_id: typing.Optional[str] = None,
        external_record_id: typing.Optional[str] = None,
        pay_period_from: typing.Optional[str] = None,
        pay_period_to: typing.Optional[str] = None,
        pay_date: typing.Optional[str] = None,
        payor_name: typing.Optional[str] = None,
        payor_add1: typing.Optional[str] = None,
        payor_add2: typing.Optional[str] = None,
        payor_city: typing.Optional[str] = None,
        payor_state: typing.Optional[str] = None,
        payor_zip: typing.Optional[str] = None,
        payee_name: typing.Optional[str] = None,
        currency_code: typing.Optional[str] = None,
        net: typing.Optional[str] = None,
        gross: typing.Optional[str] = None,
        total_taxes: typing.Optional[str] = None,
        total_deductions: typing.Optional[str] = None,
        ytd_net: typing.Optional[str] = None,
        ytd_gross: typing.Optional[str] = None,
        ytd_taxes: typing.Optional[str] = None,
        ytd_deductions: typing.Optional[str] = None,
        fed_witholding: typing.Optional[str] = None,
        federal_type: typing.Optional[str] = None,
        two_jobs: typing.Optional[str] = None,
        dependents_amount: typing.Optional[str] = None,
        other_income: typing.Optional[str] = None,
        deductions_amount: typing.Optional[str] = None,
        state_withholding: typing.Optional[str] = None,
        local_withholding: typing.Optional[str] = None,
        additional_fed: typing.Optional[str] = None,
        additional_state: typing.Optional[str] = None,
        additional_local: typing.Optional[str] = None,
        tax_state: typing.Optional[str] = None,
        tax_local: typing.Optional[str] = None,
        wages: typing.Optional[EmployeePaystubWages] = None,
        taxes: typing.Optional[EmployeePaystubTaxes] = None,
        deductions: typing.Optional[EmployeePaystubDeductions] = None,
        deposits: typing.Optional[EmployeePaystubDeposits] = None,
        validate: bool = False,
    ) -> None:
        raw_response = self.raw.add_employee_paystub(
            company_domain=company_domain,
            employee_id=employee_id,
            external_record_id=external_record_id,
            pay_period_from=pay_period_from,
            pay_period_to=pay_period_to,
            pay_date=pay_date,
            payor_name=payor_name,
            payor_add1=payor_add1,
            payor_add2=payor_add2,
            payor_city=payor_city,
            payor_state=payor_state,
            payor_zip=payor_zip,
            payee_name=payee_name,
            currency_code=currency_code,
            net=net,
            gross=gross,
            total_taxes=total_taxes,
            total_deductions=total_deductions,
            ytd_net=ytd_net,
            ytd_gross=ytd_gross,
            ytd_taxes=ytd_taxes,
            ytd_deductions=ytd_deductions,
            fed_witholding=fed_witholding,
            federal_type=federal_type,
            two_jobs=two_jobs,
            dependents_amount=dependents_amount,
            other_income=other_income,
            deductions_amount=deductions_amount,
            state_withholding=state_withholding,
            local_withholding=local_withholding,
            additional_fed=additional_fed,
            additional_state=additional_state,
            additional_local=additional_local,
            tax_state=tax_state,
            tax_local=tax_local,
            wages=wages,
            taxes=taxes,
            deductions=deductions,
            deposits=deposits,
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        company_domain: str,
        employee_id: typing.Optional[str] = None,
        external_record_id: typing.Optional[str] = None,
        pay_period_from: typing.Optional[str] = None,
        pay_period_to: typing.Optional[str] = None,
        pay_date: typing.Optional[str] = None,
        payor_name: typing.Optional[str] = None,
        payor_add1: typing.Optional[str] = None,
        payor_add2: typing.Optional[str] = None,
        payor_city: typing.Optional[str] = None,
        payor_state: typing.Optional[str] = None,
        payor_zip: typing.Optional[str] = None,
        payee_name: typing.Optional[str] = None,
        currency_code: typing.Optional[str] = None,
        net: typing.Optional[str] = None,
        gross: typing.Optional[str] = None,
        total_taxes: typing.Optional[str] = None,
        total_deductions: typing.Optional[str] = None,
        ytd_net: typing.Optional[str] = None,
        ytd_gross: typing.Optional[str] = None,
        ytd_taxes: typing.Optional[str] = None,
        ytd_deductions: typing.Optional[str] = None,
        fed_witholding: typing.Optional[str] = None,
        federal_type: typing.Optional[str] = None,
        two_jobs: typing.Optional[str] = None,
        dependents_amount: typing.Optional[str] = None,
        other_income: typing.Optional[str] = None,
        deductions_amount: typing.Optional[str] = None,
        state_withholding: typing.Optional[str] = None,
        local_withholding: typing.Optional[str] = None,
        additional_fed: typing.Optional[str] = None,
        additional_state: typing.Optional[str] = None,
        additional_local: typing.Optional[str] = None,
        tax_state: typing.Optional[str] = None,
        tax_local: typing.Optional[str] = None,
        wages: typing.Optional[EmployeePaystubWages] = None,
        taxes: typing.Optional[EmployeePaystubTaxes] = None,
        deductions: typing.Optional[EmployeePaystubDeductions] = None,
        deposits: typing.Optional[EmployeePaystubDeposits] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._add_employee_paystub_mapped_args(
            company_domain=company_domain,
            employee_id=employee_id,
            external_record_id=external_record_id,
            pay_period_from=pay_period_from,
            pay_period_to=pay_period_to,
            pay_date=pay_date,
            payor_name=payor_name,
            payor_add1=payor_add1,
            payor_add2=payor_add2,
            payor_city=payor_city,
            payor_state=payor_state,
            payor_zip=payor_zip,
            payee_name=payee_name,
            currency_code=currency_code,
            net=net,
            gross=gross,
            total_taxes=total_taxes,
            total_deductions=total_deductions,
            ytd_net=ytd_net,
            ytd_gross=ytd_gross,
            ytd_taxes=ytd_taxes,
            ytd_deductions=ytd_deductions,
            fed_witholding=fed_witholding,
            federal_type=federal_type,
            two_jobs=two_jobs,
            dependents_amount=dependents_amount,
            other_income=other_income,
            deductions_amount=deductions_amount,
            state_withholding=state_withholding,
            local_withholding=local_withholding,
            additional_fed=additional_fed,
            additional_state=additional_state,
            additional_local=additional_local,
            tax_state=tax_state,
            tax_local=tax_local,
            wages=wages,
            taxes=taxes,
            deductions=deductions,
            deposits=deposits,
        )
        return await self._aadd_employee_paystub_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        company_domain: str,
        employee_id: typing.Optional[str] = None,
        external_record_id: typing.Optional[str] = None,
        pay_period_from: typing.Optional[str] = None,
        pay_period_to: typing.Optional[str] = None,
        pay_date: typing.Optional[str] = None,
        payor_name: typing.Optional[str] = None,
        payor_add1: typing.Optional[str] = None,
        payor_add2: typing.Optional[str] = None,
        payor_city: typing.Optional[str] = None,
        payor_state: typing.Optional[str] = None,
        payor_zip: typing.Optional[str] = None,
        payee_name: typing.Optional[str] = None,
        currency_code: typing.Optional[str] = None,
        net: typing.Optional[str] = None,
        gross: typing.Optional[str] = None,
        total_taxes: typing.Optional[str] = None,
        total_deductions: typing.Optional[str] = None,
        ytd_net: typing.Optional[str] = None,
        ytd_gross: typing.Optional[str] = None,
        ytd_taxes: typing.Optional[str] = None,
        ytd_deductions: typing.Optional[str] = None,
        fed_witholding: typing.Optional[str] = None,
        federal_type: typing.Optional[str] = None,
        two_jobs: typing.Optional[str] = None,
        dependents_amount: typing.Optional[str] = None,
        other_income: typing.Optional[str] = None,
        deductions_amount: typing.Optional[str] = None,
        state_withholding: typing.Optional[str] = None,
        local_withholding: typing.Optional[str] = None,
        additional_fed: typing.Optional[str] = None,
        additional_state: typing.Optional[str] = None,
        additional_local: typing.Optional[str] = None,
        tax_state: typing.Optional[str] = None,
        tax_local: typing.Optional[str] = None,
        wages: typing.Optional[EmployeePaystubWages] = None,
        taxes: typing.Optional[EmployeePaystubTaxes] = None,
        deductions: typing.Optional[EmployeePaystubDeductions] = None,
        deposits: typing.Optional[EmployeePaystubDeposits] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._add_employee_paystub_mapped_args(
            company_domain=company_domain,
            employee_id=employee_id,
            external_record_id=external_record_id,
            pay_period_from=pay_period_from,
            pay_period_to=pay_period_to,
            pay_date=pay_date,
            payor_name=payor_name,
            payor_add1=payor_add1,
            payor_add2=payor_add2,
            payor_city=payor_city,
            payor_state=payor_state,
            payor_zip=payor_zip,
            payee_name=payee_name,
            currency_code=currency_code,
            net=net,
            gross=gross,
            total_taxes=total_taxes,
            total_deductions=total_deductions,
            ytd_net=ytd_net,
            ytd_gross=ytd_gross,
            ytd_taxes=ytd_taxes,
            ytd_deductions=ytd_deductions,
            fed_witholding=fed_witholding,
            federal_type=federal_type,
            two_jobs=two_jobs,
            dependents_amount=dependents_amount,
            other_income=other_income,
            deductions_amount=deductions_amount,
            state_withholding=state_withholding,
            local_withholding=local_withholding,
            additional_fed=additional_fed,
            additional_state=additional_state,
            additional_local=additional_local,
            tax_state=tax_state,
            tax_local=tax_local,
            wages=wages,
            taxes=taxes,
            deductions=deductions,
            deposits=deposits,
        )
        return self._add_employee_paystub_oapg(
            body=args.body,
            path_params=args.path,
        )

