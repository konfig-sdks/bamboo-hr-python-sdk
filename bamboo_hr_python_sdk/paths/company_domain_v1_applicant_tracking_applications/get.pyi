# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from bamboo_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from bamboo_hr_python_sdk.api_response import AsyncGeneratorResponse
from bamboo_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401

from bamboo_hr_python_sdk.model.applicant_tracking_list_applications_response import ApplicantTrackingListApplicationsResponse as ApplicantTrackingListApplicationsResponseSchema

from bamboo_hr_python_sdk.type.applicant_tracking_list_applications_response import ApplicantTrackingListApplicationsResponse

from ...api_client import Dictionary
from bamboo_hr_python_sdk.pydantic.applicant_tracking_list_applications_response import ApplicantTrackingListApplicationsResponse as ApplicantTrackingListApplicationsResponsePydantic

# Query params
PageSchema = schemas.IntSchema
JobIdSchema = schemas.IntSchema
ApplicationStatusIdSchema = schemas.IntSchema


class ApplicationStatusSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def ALL(cls):
        return cls("ALL")
    
    @schemas.classproperty
    def ALL_ACTIVE(cls):
        return cls("ALL_ACTIVE")
    
    @schemas.classproperty
    def NEW(cls):
        return cls("NEW")
    
    @schemas.classproperty
    def ACTIVE(cls):
        return cls("ACTIVE")
    
    @schemas.classproperty
    def INACTIVE(cls):
        return cls("INACTIVE")
    
    @schemas.classproperty
    def HIRED(cls):
        return cls("HIRED")


class JobStatusGroupsSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def ALL(cls):
        return cls("ALL")
    
    @schemas.classproperty
    def DRAFT_AND_OPEN(cls):
        return cls("DRAFT_AND_OPEN")
    
    @schemas.classproperty
    def OPEN(cls):
        return cls("Open")
    
    @schemas.classproperty
    def FILLED(cls):
        return cls("Filled")
    
    @schemas.classproperty
    def DRAFT(cls):
        return cls("Draft")
    
    @schemas.classproperty
    def DELETED(cls):
        return cls("Deleted")
    
    @schemas.classproperty
    def ON_HOLD(cls):
        return cls("On Hold")
    
    @schemas.classproperty
    def CANCELED(cls):
        return cls("Canceled")
SearchStringSchema = schemas.StrSchema


class SortBySchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def FIRST_NAME(cls):
        return cls("first_name")
    
    @schemas.classproperty
    def JOB_TITLE(cls):
        return cls("job_title")
    
    @schemas.classproperty
    def RATING(cls):
        return cls("rating")
    
    @schemas.classproperty
    def PHONE(cls):
        return cls("phone")
    
    @schemas.classproperty
    def STATUS(cls):
        return cls("status")
    
    @schemas.classproperty
    def LAST_UPDATED(cls):
        return cls("last_updated")
    
    @schemas.classproperty
    def CREATED_DATE(cls):
        return cls("created_date")


class SortOrderSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def ASC(cls):
        return cls("ASC")
    
    @schemas.classproperty
    def DESC(cls):
        return cls("DESC")
NewSinceSchema = schemas.DateTimeSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'jobId': typing.Union[JobIdSchema, decimal.Decimal, int, ],
        'applicationStatusId': typing.Union[ApplicationStatusIdSchema, decimal.Decimal, int, ],
        'applicationStatus': typing.Union[ApplicationStatusSchema, str, ],
        'jobStatusGroups': typing.Union[JobStatusGroupsSchema, str, ],
        'searchString': typing.Union[SearchStringSchema, str, ],
        'sortBy': typing.Union[SortBySchema, str, ],
        'sortOrder': typing.Union[SortOrderSchema, str, ],
        'newSince': typing.Union[NewSinceSchema, str, datetime, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_job_id = api_client.QueryParameter(
    name="jobId",
    style=api_client.ParameterStyle.FORM,
    schema=JobIdSchema,
    explode=True,
)
request_query_application_status_id = api_client.QueryParameter(
    name="applicationStatusId",
    style=api_client.ParameterStyle.FORM,
    schema=ApplicationStatusIdSchema,
    explode=True,
)
request_query_application_status = api_client.QueryParameter(
    name="applicationStatus",
    style=api_client.ParameterStyle.FORM,
    schema=ApplicationStatusSchema,
    explode=True,
)
request_query_job_status_groups = api_client.QueryParameter(
    name="jobStatusGroups",
    style=api_client.ParameterStyle.FORM,
    schema=JobStatusGroupsSchema,
    explode=True,
)
request_query_search_string = api_client.QueryParameter(
    name="searchString",
    style=api_client.ParameterStyle.FORM,
    schema=SearchStringSchema,
    explode=True,
)
request_query_sort_by = api_client.QueryParameter(
    name="sortBy",
    style=api_client.ParameterStyle.FORM,
    schema=SortBySchema,
    explode=True,
)
request_query_sort_order = api_client.QueryParameter(
    name="sortOrder",
    style=api_client.ParameterStyle.FORM,
    schema=SortOrderSchema,
    explode=True,
)
request_query_new_since = api_client.QueryParameter(
    name="newSince",
    style=api_client.ParameterStyle.FORM,
    schema=NewSinceSchema,
    explode=True,
)
# Path params
CompanyDomainSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'companyDomain': typing.Union[CompanyDomainSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_domain = api_client.PathParameter(
    name="companyDomain",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyDomainSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = ApplicantTrackingListApplicationsResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: ApplicantTrackingListApplicationsResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: ApplicantTrackingListApplicationsResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _list_applications_mapped_args(
        self,
        company_domain: str,
        page: typing.Optional[int] = None,
        job_id: typing.Optional[int] = None,
        application_status_id: typing.Optional[int] = None,
        application_status: typing.Optional[str] = None,
        job_status_groups: typing.Optional[str] = None,
        search_string: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        new_since: typing.Optional[datetime] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _path_params = {}
        if page is not None:
            _query_params["page"] = page
        if job_id is not None:
            _query_params["jobId"] = job_id
        if application_status_id is not None:
            _query_params["applicationStatusId"] = application_status_id
        if application_status is not None:
            _query_params["applicationStatus"] = application_status
        if job_status_groups is not None:
            _query_params["jobStatusGroups"] = job_status_groups
        if search_string is not None:
            _query_params["searchString"] = search_string
        if sort_by is not None:
            _query_params["sortBy"] = sort_by
        if sort_order is not None:
            _query_params["sortOrder"] = sort_order
        if new_since is not None:
            _query_params["newSince"] = new_since
        if company_domain is not None:
            _path_params["companyDomain"] = company_domain
        args.query = _query_params
        args.path = _path_params
        return args

    async def _alist_applications_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get Applications
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_domain,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_page,
            request_query_job_id,
            request_query_application_status_id,
            request_query_application_status,
            request_query_job_status_groups,
            request_query_search_string,
            request_query_sort_by,
            request_query_sort_order,
            request_query_new_since,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/{companyDomain}/v1/applicant_tracking/applications',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _list_applications_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get Applications
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_domain,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_page,
            request_query_job_id,
            request_query_application_status_id,
            request_query_application_status,
            request_query_job_status_groups,
            request_query_search_string,
            request_query_sort_by,
            request_query_sort_order,
            request_query_new_since,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/{companyDomain}/v1/applicant_tracking/applications',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ListApplicationsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alist_applications(
        self,
        company_domain: str,
        page: typing.Optional[int] = None,
        job_id: typing.Optional[int] = None,
        application_status_id: typing.Optional[int] = None,
        application_status: typing.Optional[str] = None,
        job_status_groups: typing.Optional[str] = None,
        search_string: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        new_since: typing.Optional[datetime] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_applications_mapped_args(
            company_domain=company_domain,
            page=page,
            job_id=job_id,
            application_status_id=application_status_id,
            application_status=application_status,
            job_status_groups=job_status_groups,
            search_string=search_string,
            sort_by=sort_by,
            sort_order=sort_order,
            new_since=new_since,
        )
        return await self._alist_applications_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def list_applications(
        self,
        company_domain: str,
        page: typing.Optional[int] = None,
        job_id: typing.Optional[int] = None,
        application_status_id: typing.Optional[int] = None,
        application_status: typing.Optional[str] = None,
        job_status_groups: typing.Optional[str] = None,
        search_string: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        new_since: typing.Optional[datetime] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_applications_mapped_args(
            company_domain=company_domain,
            page=page,
            job_id=job_id,
            application_status_id=application_status_id,
            application_status=application_status,
            job_status_groups=job_status_groups,
            search_string=search_string,
            sort_by=sort_by,
            sort_order=sort_order,
            new_since=new_since,
        )
        return self._list_applications_oapg(
            query_params=args.query,
            path_params=args.path,
        )

class ListApplications(BaseApi):

    async def alist_applications(
        self,
        company_domain: str,
        page: typing.Optional[int] = None,
        job_id: typing.Optional[int] = None,
        application_status_id: typing.Optional[int] = None,
        application_status: typing.Optional[str] = None,
        job_status_groups: typing.Optional[str] = None,
        search_string: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        new_since: typing.Optional[datetime] = None,
        validate: bool = False,
        **kwargs,
    ) -> ApplicantTrackingListApplicationsResponsePydantic:
        raw_response = await self.raw.alist_applications(
            company_domain=company_domain,
            page=page,
            job_id=job_id,
            application_status_id=application_status_id,
            application_status=application_status,
            job_status_groups=job_status_groups,
            search_string=search_string,
            sort_by=sort_by,
            sort_order=sort_order,
            new_since=new_since,
            **kwargs,
        )
        if validate:
            return ApplicantTrackingListApplicationsResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(ApplicantTrackingListApplicationsResponsePydantic, raw_response.body)
    
    
    def list_applications(
        self,
        company_domain: str,
        page: typing.Optional[int] = None,
        job_id: typing.Optional[int] = None,
        application_status_id: typing.Optional[int] = None,
        application_status: typing.Optional[str] = None,
        job_status_groups: typing.Optional[str] = None,
        search_string: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        new_since: typing.Optional[datetime] = None,
        validate: bool = False,
    ) -> ApplicantTrackingListApplicationsResponsePydantic:
        raw_response = self.raw.list_applications(
            company_domain=company_domain,
            page=page,
            job_id=job_id,
            application_status_id=application_status_id,
            application_status=application_status,
            job_status_groups=job_status_groups,
            search_string=search_string,
            sort_by=sort_by,
            sort_order=sort_order,
            new_since=new_since,
        )
        if validate:
            return ApplicantTrackingListApplicationsResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(ApplicantTrackingListApplicationsResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        company_domain: str,
        page: typing.Optional[int] = None,
        job_id: typing.Optional[int] = None,
        application_status_id: typing.Optional[int] = None,
        application_status: typing.Optional[str] = None,
        job_status_groups: typing.Optional[str] = None,
        search_string: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        new_since: typing.Optional[datetime] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_applications_mapped_args(
            company_domain=company_domain,
            page=page,
            job_id=job_id,
            application_status_id=application_status_id,
            application_status=application_status,
            job_status_groups=job_status_groups,
            search_string=search_string,
            sort_by=sort_by,
            sort_order=sort_order,
            new_since=new_since,
        )
        return await self._alist_applications_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        company_domain: str,
        page: typing.Optional[int] = None,
        job_id: typing.Optional[int] = None,
        application_status_id: typing.Optional[int] = None,
        application_status: typing.Optional[str] = None,
        job_status_groups: typing.Optional[str] = None,
        search_string: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        new_since: typing.Optional[datetime] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_applications_mapped_args(
            company_domain=company_domain,
            page=page,
            job_id=job_id,
            application_status_id=application_status_id,
            application_status=application_status,
            job_status_groups=job_status_groups,
            search_string=search_string,
            sort_by=sort_by,
            sort_order=sort_order,
            new_since=new_since,
        )
        return self._list_applications_oapg(
            query_params=args.query,
            path_params=args.path,
        )

