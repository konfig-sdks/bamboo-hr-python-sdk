# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from bamboo_hr_python_sdk.pydantic.time_tracking_project_info import TimeTrackingProjectInfo

class TimesheetEntry(BaseModel):
    # ID of the entry.
    id: typing.Optional[int] = Field(None, alias='id')

    # ID of the employee associated with the entry.
    employee_id: typing.Optional[int] = Field(None, alias='employeeId')

    # type of the entry.
    type: typing.Optional[Literal["hour", "clock"]] = Field(None, alias='type')

    # Timestamp, in UTC, of when the employee clocked in. ISO 8601 format. Property can be null.
    start: typing.Optional[str] = Field(None, alias='start')

    # Timestamp, in UTC, of when the employee clocked out. ISO 8601 format. Property can be null.
    end: typing.Optional[str] = Field(None, alias='end')

    # The timezone the clock entry was recorded in. Property can be null.
    timezone: typing.Optional[str] = Field(None, alias='timezone')

    # The number of hours for the entry. This value has a maximum scale of 4. Property can be null.
    hours: typing.Optional[typing.Union[int, float]] = Field(None, alias='hours')

    # The note associated with the entry. Property can be null.
    note: typing.Optional[str] = Field(None, alias='note')

    project_info: typing.Optional[TimeTrackingProjectInfo] = Field(None, alias='projectInfo')

    # Approval status of the timesheet for the entry.
    approved: typing.Optional[bool] = Field(None, alias='approved')

    # Timestamp, in UTC, of when the timesheet for the entry was approved. Property can be null.
    approved_at: typing.Optional[str] = Field(None, alias='approvedAt')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
