# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class ApplicantTrackingCreateNewJobOpeningRequest(BaseModel):
    # The posting title of the job opening.
    posting_title: str = Field(alias='postingTitle')

    # The status of the job opening.
    job_status: Literal["Draft", "Open", "On Hold", "Filled", "Canceled"] = Field(alias='jobStatus')

    # The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening.
    hiring_lead: int = Field(alias='hiringLead')

    # The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc.
    employment_type: str = Field(alias='employmentType')

    # The long-form text description of the job opening.
    job_description: str = Field(alias='jobDescription')

    # The department of the job opening.
    department: typing.Optional[str] = Field(None, alias='department')

    # The minimum experience level that qualifies a candidate for the job opening.
    minimum_experience: typing.Optional[Literal["Entry-level", "Mid-level", "Experienced", "Manager/Supervisor", "Senior Manager/Supervisor'", "Executive", "Senior Executive"]] = Field(None, alias='minimumExperience')

    # The pay rate or compensation for the job opening.
    compensation: typing.Optional[str] = Field(None, alias='compensation')

    # The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location.
    job_location: typing.Optional[int] = Field(None, alias='jobLocation')

    # Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required).
    application_question_resume: typing.Optional[Literal["true", "false", "Required"]] = Field(None, alias='applicationQuestionResume')

    # Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required).
    application_question_address: typing.Optional[Literal["true", "false", "Required"]] = Field(None, alias='applicationQuestionAddress')

    # Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required).
    application_question_linkedin_url: typing.Optional[Literal["true", "false", "Required"]] = Field(None, alias='applicationQuestionLinkedinUrl')

    # Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required).
    application_question_date_available: typing.Optional[Literal["true", "false", "Required"]] = Field(None, alias='applicationQuestionDateAvailable')

    # Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required).
    application_question_desired_salary: typing.Optional[Literal["true", "false", "Required"]] = Field(None, alias='applicationQuestionDesiredSalary')

    # Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required).
    application_question_cover_letter: typing.Optional[Literal["true", "false", "Required"]] = Field(None, alias='applicationQuestionCoverLetter')

    # Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required).
    application_question_referred_by: typing.Optional[Literal["true", "false", "Required"]] = Field(None, alias='applicationQuestionReferredBy')

    # Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required).
    application_question_website_url: typing.Optional[Literal["true", "false", "Required"]] = Field(None, alias='applicationQuestionWebsiteUrl')

    # Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required).
    application_question_highest_education: typing.Optional[Literal["true", "false", "Required"]] = Field(None, alias='applicationQuestionHighestEducation')

    # Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required).
    application_question_college: typing.Optional[Literal["true", "false", "Required"]] = Field(None, alias='applicationQuestionCollege')

    # Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required).
    application_question_references: typing.Optional[Literal["true", "false", "Required"]] = Field(None, alias='applicationQuestionReferences')

    # The internal job code for the job opening.
    internal_job_code: typing.Optional[str] = Field(None, alias='internalJobCode')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
