# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from bamboo_hr_python_sdk.pydantic.employee_paystub_deductions import EmployeePaystubDeductions
from bamboo_hr_python_sdk.pydantic.employee_paystub_deposits import EmployeePaystubDeposits
from bamboo_hr_python_sdk.pydantic.employee_paystub_taxes import EmployeePaystubTaxes
from bamboo_hr_python_sdk.pydantic.employee_paystub_wages import EmployeePaystubWages

class EmployeePaystub(BaseModel):
    employee_id: typing.Optional[str] = Field(None, alias='employeeId')

    external_record_id: typing.Optional[str] = Field(None, alias='externalRecordId')

    pay_period_from: typing.Optional[str] = Field(None, alias='payPeriodFrom')

    pay_period_to: typing.Optional[str] = Field(None, alias='payPeriodTo')

    pay_date: typing.Optional[str] = Field(None, alias='payDate')

    payor_name: typing.Optional[str] = Field(None, alias='payorName')

    payor_add1: typing.Optional[str] = Field(None, alias='payorAdd1')

    payor_add2: typing.Optional[str] = Field(None, alias='payorAdd2')

    payor_city: typing.Optional[str] = Field(None, alias='payorCity')

    payor_state: typing.Optional[str] = Field(None, alias='payorState')

    payor_zip: typing.Optional[str] = Field(None, alias='payorZip')

    payee_name: typing.Optional[str] = Field(None, alias='payeeName')

    currency_code: typing.Optional[str] = Field(None, alias='currencyCode')

    net: typing.Optional[str] = Field(None, alias='net')

    gross: typing.Optional[str] = Field(None, alias='gross')

    total_taxes: typing.Optional[str] = Field(None, alias='totalTaxes')

    total_deductions: typing.Optional[str] = Field(None, alias='totalDeductions')

    ytd_net: typing.Optional[str] = Field(None, alias='ytdNet')

    ytd_gross: typing.Optional[str] = Field(None, alias='ytdGross')

    ytd_taxes: typing.Optional[str] = Field(None, alias='ytdTaxes')

    ytd_deductions: typing.Optional[str] = Field(None, alias='ytdDeductions')

    fed_witholding: typing.Optional[str] = Field(None, alias='fedWitholding')

    # must be 2020_w4, pre_2020_w4, or null
    federal_type: typing.Optional[Literal["2020_w4", "pre_2020_w4"]] = Field(None, alias='federalType')

    # boolean value
    two_jobs: typing.Optional[str] = Field(None, alias='twoJobs')

    # float value
    dependents_amount: typing.Optional[str] = Field(None, alias='dependentsAmount')

    # float value
    other_income: typing.Optional[str] = Field(None, alias='otherIncome')

    # float value
    deductions_amount: typing.Optional[str] = Field(None, alias='deductionsAmount')

    state_withholding: typing.Optional[str] = Field(None, alias='stateWithholding')

    local_withholding: typing.Optional[str] = Field(None, alias='localWithholding')

    additional_fed: typing.Optional[str] = Field(None, alias='additionalFed')

    additional_state: typing.Optional[str] = Field(None, alias='additionalState')

    additional_local: typing.Optional[str] = Field(None, alias='additionalLocal')

    tax_state: typing.Optional[str] = Field(None, alias='taxState')

    tax_local: typing.Optional[str] = Field(None, alias='taxLocal')

    wages: typing.Optional[EmployeePaystubWages] = Field(None, alias='wages')

    taxes: typing.Optional[EmployeePaystubTaxes] = Field(None, alias='taxes')

    deductions: typing.Optional[EmployeePaystubDeductions] = Field(None, alias='deductions')

    deposits: typing.Optional[EmployeePaystubDeposits] = Field(None, alias='deposits')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
