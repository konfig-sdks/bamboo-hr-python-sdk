# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class TimeTrackingRecord(BaseModel):
    # A unique identifier for the record. Use this ID to adjust or delete these hours. It can be any ID you use to track the record up to 36 characters in length. (i.e. UUID).
    time_tracking_id: str = Field(alias='timeTrackingId')

    # The ID of the employee.
    employee_id: int = Field(alias='employeeId')

    # The date the hours were worked. Please use the ISO-8601 date format YYYY-MM-DD.
    date_hours_worked: str = Field(alias='dateHoursWorked')

    # The type of hours - regular or overtime. Please use either \"REG\" or \"OT\" here.
    rate_type: str = Field(alias='rateType')

    # The number of hours worked.
    hours_worked: typing.Union[int, float] = Field(alias='hoursWorked')

    # [Optional] The ID of the division for the employee.
    division_id: typing.Optional[int] = Field(None, alias='divisionId')

    # [Optional] The ID of the department for the employee.
    department_id: typing.Optional[int] = Field(None, alias='departmentId')

    # [Optional] The ID of the job title for the employee.
    job_title_id: typing.Optional[int] = Field(None, alias='jobTitleId')

    # [Optional] Only necessary if the payroll provider requires a pay code
    pay_code: typing.Optional[str] = Field(None, alias='payCode')

    # [Optional] The rate of pay. e.g. $15.00/hour should use 15.00 here. Only necessary if the payroll provider requires a pay rate.
    pay_rate: typing.Optional[typing.Union[int, float]] = Field(None, alias='payRate')

    # [Optional] A job code.
    job_code: typing.Optional[int] = Field(None, alias='jobCode')

    # [Optional] A list of up to four 20 characters max job numbers in comma delimited format with no spaces.
    job_data: typing.Optional[str] = Field(None, alias='jobData')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
