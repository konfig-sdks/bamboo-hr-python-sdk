# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class ApplicantTrackingCreateNewApplicationRequest(BaseModel):
    # The first name of the candidate.
    first_name: str = Field(alias='firstName')

    # The last name of the candidate.
    last_name: str = Field(alias='lastName')

    # The id of the job opening for the candidate application.
    job_id: int = Field(alias='jobId')

    # The email address of the candidate.
    email: typing.Optional[str] = Field(None, alias='email')

    # The phone number of the candidate.
    phone_number: typing.Optional[str] = Field(None, alias='phoneNumber')

    # The source of the candidate application, e.g. LinkedIn, Indeed, etc.
    source: typing.Optional[str] = Field(None, alias='source')

    # The street address of the candidate.
    address: typing.Optional[str] = Field(None, alias='address')

    # The city of the candidate.
    city: typing.Optional[str] = Field(None, alias='city')

    # The state or province of the candidate. Accepts state name, abbreviation, or ISO code.
    state: typing.Optional[str] = Field(None, alias='state')

    # The zip code or postal code of the candidate.
    zip: typing.Optional[str] = Field(None, alias='zip')

    # The country of the candidate. Accepts country name or ISO code.
    country: typing.Optional[str] = Field(None, alias='country')

    # The LinkedIn profile url of the candidate.
    linkedin_url: typing.Optional[str] = Field(None, alias='linkedinUrl')

    # The available start date of the candidate with the format YYYY-MM-DD.
    date_available: typing.Optional[str] = Field(None, alias='dateAvailable')

    # The desired salary of the candidate.
    desired_salary: typing.Optional[str] = Field(None, alias='desiredSalary')

    # The person or entity that referred the candidate.
    referred_by: typing.Optional[str] = Field(None, alias='referredBy')

    # The personal website, blog, or online portfolio of the candidate.
    website_url: typing.Optional[str] = Field(None, alias='websiteUrl')

    # The highest completed education level of the candidate.
    highest_education: typing.Optional[Literal["GED or Equivalent", "High School", "Some College", "College - Associates", "College - Bachelor of Arts", "College - Bachelor of Fine Arts", "College - Bachelor of Science", "College - Master of Arts", "College - Master of Fine Arts", "College - Master of Science", "College - Master of Business Administration", "College - Doctorate", "Medical Doctor", "Other"]] = Field(None, alias='highestEducation')

    # The college or university of the candidate.
    college_name: typing.Optional[str] = Field(None, alias='collegeName')

    # A list of references supplied by the candidate.
    references: typing.Optional[str] = Field(None, alias='references')

    # Resume of the candidate.
    resume: typing.Optional[typing.IO] = Field(None, alias='resume')

    # Cover letter of the candidate.
    cover_letter: typing.Optional[typing.IO] = Field(None, alias='coverLetter')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
