# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class ApplicantTrackingCreateNewJobOpeningRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "jobStatus",
            "employmentType",
            "postingTitle",
            "jobDescription",
            "hiringLead",
        }
        
        class properties:
            postingTitle = schemas.StrSchema
            
            
            class jobStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DRAFT(cls):
                    return cls("Draft")
                
                @schemas.classproperty
                def OPEN(cls):
                    return cls("Open")
                
                @schemas.classproperty
                def ON_HOLD(cls):
                    return cls("On Hold")
                
                @schemas.classproperty
                def FILLED(cls):
                    return cls("Filled")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("Canceled")
            hiringLead = schemas.IntSchema
            employmentType = schemas.StrSchema
            jobDescription = schemas.StrSchema
            department = schemas.StrSchema
            
            
            class minimumExperience(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ENTRYLEVEL(cls):
                    return cls("Entry-level")
                
                @schemas.classproperty
                def MIDLEVEL(cls):
                    return cls("Mid-level")
                
                @schemas.classproperty
                def EXPERIENCED(cls):
                    return cls("Experienced")
                
                @schemas.classproperty
                def MANAGER_SUPERVISOR(cls):
                    return cls("Manager/Supervisor")
                
                @schemas.classproperty
                def SENIOR_MANAGER_SUPERVISOR(cls):
                    return cls("Senior Manager/Supervisor'")
                
                @schemas.classproperty
                def EXECUTIVE(cls):
                    return cls("Executive")
                
                @schemas.classproperty
                def SENIOR_EXECUTIVE(cls):
                    return cls("Senior Executive")
            compensation = schemas.StrSchema
            jobLocation = schemas.IntSchema
            
            
            class applicationQuestionResume(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
            
            
            class applicationQuestionAddress(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
            
            
            class applicationQuestionLinkedinUrl(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
            
            
            class applicationQuestionDateAvailable(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
            
            
            class applicationQuestionDesiredSalary(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
            
            
            class applicationQuestionCoverLetter(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
            
            
            class applicationQuestionReferredBy(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
            
            
            class applicationQuestionWebsiteUrl(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
            
            
            class applicationQuestionHighestEducation(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
            
            
            class applicationQuestionCollege(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
            
            
            class applicationQuestionReferences(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
            internalJobCode = schemas.StrSchema
            __annotations__ = {
                "postingTitle": postingTitle,
                "jobStatus": jobStatus,
                "hiringLead": hiringLead,
                "employmentType": employmentType,
                "jobDescription": jobDescription,
                "department": department,
                "minimumExperience": minimumExperience,
                "compensation": compensation,
                "jobLocation": jobLocation,
                "applicationQuestionResume": applicationQuestionResume,
                "applicationQuestionAddress": applicationQuestionAddress,
                "applicationQuestionLinkedinUrl": applicationQuestionLinkedinUrl,
                "applicationQuestionDateAvailable": applicationQuestionDateAvailable,
                "applicationQuestionDesiredSalary": applicationQuestionDesiredSalary,
                "applicationQuestionCoverLetter": applicationQuestionCoverLetter,
                "applicationQuestionReferredBy": applicationQuestionReferredBy,
                "applicationQuestionWebsiteUrl": applicationQuestionWebsiteUrl,
                "applicationQuestionHighestEducation": applicationQuestionHighestEducation,
                "applicationQuestionCollege": applicationQuestionCollege,
                "applicationQuestionReferences": applicationQuestionReferences,
                "internalJobCode": internalJobCode,
            }
    
    jobStatus: MetaOapg.properties.jobStatus
    employmentType: MetaOapg.properties.employmentType
    postingTitle: MetaOapg.properties.postingTitle
    jobDescription: MetaOapg.properties.jobDescription
    hiringLead: MetaOapg.properties.hiringLead
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postingTitle"]) -> MetaOapg.properties.postingTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobStatus"]) -> MetaOapg.properties.jobStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hiringLead"]) -> MetaOapg.properties.hiringLead: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentType"]) -> MetaOapg.properties.employmentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobDescription"]) -> MetaOapg.properties.jobDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> MetaOapg.properties.department: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimumExperience"]) -> MetaOapg.properties.minimumExperience: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compensation"]) -> MetaOapg.properties.compensation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobLocation"]) -> MetaOapg.properties.jobLocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationQuestionResume"]) -> MetaOapg.properties.applicationQuestionResume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationQuestionAddress"]) -> MetaOapg.properties.applicationQuestionAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationQuestionLinkedinUrl"]) -> MetaOapg.properties.applicationQuestionLinkedinUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationQuestionDateAvailable"]) -> MetaOapg.properties.applicationQuestionDateAvailable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationQuestionDesiredSalary"]) -> MetaOapg.properties.applicationQuestionDesiredSalary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationQuestionCoverLetter"]) -> MetaOapg.properties.applicationQuestionCoverLetter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationQuestionReferredBy"]) -> MetaOapg.properties.applicationQuestionReferredBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationQuestionWebsiteUrl"]) -> MetaOapg.properties.applicationQuestionWebsiteUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationQuestionHighestEducation"]) -> MetaOapg.properties.applicationQuestionHighestEducation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationQuestionCollege"]) -> MetaOapg.properties.applicationQuestionCollege: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationQuestionReferences"]) -> MetaOapg.properties.applicationQuestionReferences: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalJobCode"]) -> MetaOapg.properties.internalJobCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["postingTitle", "jobStatus", "hiringLead", "employmentType", "jobDescription", "department", "minimumExperience", "compensation", "jobLocation", "applicationQuestionResume", "applicationQuestionAddress", "applicationQuestionLinkedinUrl", "applicationQuestionDateAvailable", "applicationQuestionDesiredSalary", "applicationQuestionCoverLetter", "applicationQuestionReferredBy", "applicationQuestionWebsiteUrl", "applicationQuestionHighestEducation", "applicationQuestionCollege", "applicationQuestionReferences", "internalJobCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postingTitle"]) -> MetaOapg.properties.postingTitle: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobStatus"]) -> MetaOapg.properties.jobStatus: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hiringLead"]) -> MetaOapg.properties.hiringLead: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentType"]) -> MetaOapg.properties.employmentType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobDescription"]) -> MetaOapg.properties.jobDescription: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union[MetaOapg.properties.department, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimumExperience"]) -> typing.Union[MetaOapg.properties.minimumExperience, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compensation"]) -> typing.Union[MetaOapg.properties.compensation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobLocation"]) -> typing.Union[MetaOapg.properties.jobLocation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationQuestionResume"]) -> typing.Union[MetaOapg.properties.applicationQuestionResume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationQuestionAddress"]) -> typing.Union[MetaOapg.properties.applicationQuestionAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationQuestionLinkedinUrl"]) -> typing.Union[MetaOapg.properties.applicationQuestionLinkedinUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationQuestionDateAvailable"]) -> typing.Union[MetaOapg.properties.applicationQuestionDateAvailable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationQuestionDesiredSalary"]) -> typing.Union[MetaOapg.properties.applicationQuestionDesiredSalary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationQuestionCoverLetter"]) -> typing.Union[MetaOapg.properties.applicationQuestionCoverLetter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationQuestionReferredBy"]) -> typing.Union[MetaOapg.properties.applicationQuestionReferredBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationQuestionWebsiteUrl"]) -> typing.Union[MetaOapg.properties.applicationQuestionWebsiteUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationQuestionHighestEducation"]) -> typing.Union[MetaOapg.properties.applicationQuestionHighestEducation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationQuestionCollege"]) -> typing.Union[MetaOapg.properties.applicationQuestionCollege, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationQuestionReferences"]) -> typing.Union[MetaOapg.properties.applicationQuestionReferences, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalJobCode"]) -> typing.Union[MetaOapg.properties.internalJobCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["postingTitle", "jobStatus", "hiringLead", "employmentType", "jobDescription", "department", "minimumExperience", "compensation", "jobLocation", "applicationQuestionResume", "applicationQuestionAddress", "applicationQuestionLinkedinUrl", "applicationQuestionDateAvailable", "applicationQuestionDesiredSalary", "applicationQuestionCoverLetter", "applicationQuestionReferredBy", "applicationQuestionWebsiteUrl", "applicationQuestionHighestEducation", "applicationQuestionCollege", "applicationQuestionReferences", "internalJobCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        jobStatus: typing.Union[MetaOapg.properties.jobStatus, str, ],
        employmentType: typing.Union[MetaOapg.properties.employmentType, str, ],
        postingTitle: typing.Union[MetaOapg.properties.postingTitle, str, ],
        jobDescription: typing.Union[MetaOapg.properties.jobDescription, str, ],
        hiringLead: typing.Union[MetaOapg.properties.hiringLead, decimal.Decimal, int, ],
        department: typing.Union[MetaOapg.properties.department, str, schemas.Unset] = schemas.unset,
        minimumExperience: typing.Union[MetaOapg.properties.minimumExperience, str, schemas.Unset] = schemas.unset,
        compensation: typing.Union[MetaOapg.properties.compensation, str, schemas.Unset] = schemas.unset,
        jobLocation: typing.Union[MetaOapg.properties.jobLocation, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        applicationQuestionResume: typing.Union[MetaOapg.properties.applicationQuestionResume, str, schemas.Unset] = schemas.unset,
        applicationQuestionAddress: typing.Union[MetaOapg.properties.applicationQuestionAddress, str, schemas.Unset] = schemas.unset,
        applicationQuestionLinkedinUrl: typing.Union[MetaOapg.properties.applicationQuestionLinkedinUrl, str, schemas.Unset] = schemas.unset,
        applicationQuestionDateAvailable: typing.Union[MetaOapg.properties.applicationQuestionDateAvailable, str, schemas.Unset] = schemas.unset,
        applicationQuestionDesiredSalary: typing.Union[MetaOapg.properties.applicationQuestionDesiredSalary, str, schemas.Unset] = schemas.unset,
        applicationQuestionCoverLetter: typing.Union[MetaOapg.properties.applicationQuestionCoverLetter, str, schemas.Unset] = schemas.unset,
        applicationQuestionReferredBy: typing.Union[MetaOapg.properties.applicationQuestionReferredBy, str, schemas.Unset] = schemas.unset,
        applicationQuestionWebsiteUrl: typing.Union[MetaOapg.properties.applicationQuestionWebsiteUrl, str, schemas.Unset] = schemas.unset,
        applicationQuestionHighestEducation: typing.Union[MetaOapg.properties.applicationQuestionHighestEducation, str, schemas.Unset] = schemas.unset,
        applicationQuestionCollege: typing.Union[MetaOapg.properties.applicationQuestionCollege, str, schemas.Unset] = schemas.unset,
        applicationQuestionReferences: typing.Union[MetaOapg.properties.applicationQuestionReferences, str, schemas.Unset] = schemas.unset,
        internalJobCode: typing.Union[MetaOapg.properties.internalJobCode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplicantTrackingCreateNewJobOpeningRequest':
        return super().__new__(
            cls,
            *args,
            jobStatus=jobStatus,
            employmentType=employmentType,
            postingTitle=postingTitle,
            jobDescription=jobDescription,
            hiringLead=hiringLead,
            department=department,
            minimumExperience=minimumExperience,
            compensation=compensation,
            jobLocation=jobLocation,
            applicationQuestionResume=applicationQuestionResume,
            applicationQuestionAddress=applicationQuestionAddress,
            applicationQuestionLinkedinUrl=applicationQuestionLinkedinUrl,
            applicationQuestionDateAvailable=applicationQuestionDateAvailable,
            applicationQuestionDesiredSalary=applicationQuestionDesiredSalary,
            applicationQuestionCoverLetter=applicationQuestionCoverLetter,
            applicationQuestionReferredBy=applicationQuestionReferredBy,
            applicationQuestionWebsiteUrl=applicationQuestionWebsiteUrl,
            applicationQuestionHighestEducation=applicationQuestionHighestEducation,
            applicationQuestionCollege=applicationQuestionCollege,
            applicationQuestionReferences=applicationQuestionReferences,
            internalJobCode=internalJobCode,
            _configuration=_configuration,
            **kwargs,
        )
