# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class TimeTrackingEditClockedInEntryDataRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            start = schemas.StrSchema
            timezone = schemas.StrSchema
            note = schemas.StrSchema
            projectId = schemas.IntSchema
            taskId = schemas.IntSchema
        
            @staticmethod
            def clockInLocation() -> typing.Type['TimeTrackingEditClockedInEntryDataRequestClockInLocation']:
                return TimeTrackingEditClockedInEntryDataRequestClockInLocation
        
            @staticmethod
            def clockOutLocation() -> typing.Type['TimeTrackingEditClockedInEntryDataRequestClockOutLocation']:
                return TimeTrackingEditClockedInEntryDataRequestClockOutLocation
            __annotations__ = {
                "start": start,
                "timezone": timezone,
                "note": note,
                "projectId": projectId,
                "taskId": taskId,
                "clockInLocation": clockInLocation,
                "clockOutLocation": clockOutLocation,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taskId"]) -> MetaOapg.properties.taskId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clockInLocation"]) -> 'TimeTrackingEditClockedInEntryDataRequestClockInLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clockOutLocation"]) -> 'TimeTrackingEditClockedInEntryDataRequestClockOutLocation': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["start", "timezone", "note", "projectId", "taskId", "clockInLocation", "clockOutLocation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taskId"]) -> typing.Union[MetaOapg.properties.taskId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clockInLocation"]) -> typing.Union['TimeTrackingEditClockedInEntryDataRequestClockInLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clockOutLocation"]) -> typing.Union['TimeTrackingEditClockedInEntryDataRequestClockOutLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start", "timezone", "note", "projectId", "taskId", "clockInLocation", "clockOutLocation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        start: typing.Union[MetaOapg.properties.start, str, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        taskId: typing.Union[MetaOapg.properties.taskId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        clockInLocation: typing.Union['TimeTrackingEditClockedInEntryDataRequestClockInLocation', schemas.Unset] = schemas.unset,
        clockOutLocation: typing.Union['TimeTrackingEditClockedInEntryDataRequestClockOutLocation', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeTrackingEditClockedInEntryDataRequest':
        return super().__new__(
            cls,
            *args,
            start=start,
            timezone=timezone,
            note=note,
            projectId=projectId,
            taskId=taskId,
            clockInLocation=clockInLocation,
            clockOutLocation=clockOutLocation,
            _configuration=_configuration,
            **kwargs,
        )

from bamboo_hr_python_sdk.model.time_tracking_edit_clocked_in_entry_data_request_clock_in_location import TimeTrackingEditClockedInEntryDataRequestClockInLocation
from bamboo_hr_python_sdk.model.time_tracking_edit_clocked_in_entry_data_request_clock_out_location import TimeTrackingEditClockedInEntryDataRequestClockOutLocation
