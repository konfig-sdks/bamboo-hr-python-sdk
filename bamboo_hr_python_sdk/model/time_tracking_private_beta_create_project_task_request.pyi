# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class TimeTrackingPrivateBetaCreateProjectTaskRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            billable = schemas.BoolSchema
            allowAllEmployees = schemas.BoolSchema
        
            @staticmethod
            def employeeIds() -> typing.Type['TimeTrackingPrivateBetaCreateProjectTaskRequestEmployeeIds']:
                return TimeTrackingPrivateBetaCreateProjectTaskRequestEmployeeIds
            hasTasks = schemas.BoolSchema
        
            @staticmethod
            def tasks() -> typing.Type['TimeTrackingPrivateBetaCreateProjectTaskRequestTasks']:
                return TimeTrackingPrivateBetaCreateProjectTaskRequestTasks
            __annotations__ = {
                "name": name,
                "billable": billable,
                "allowAllEmployees": allowAllEmployees,
                "employeeIds": employeeIds,
                "hasTasks": hasTasks,
                "tasks": tasks,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billable"]) -> MetaOapg.properties.billable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowAllEmployees"]) -> MetaOapg.properties.allowAllEmployees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeIds"]) -> 'TimeTrackingPrivateBetaCreateProjectTaskRequestEmployeeIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasTasks"]) -> MetaOapg.properties.hasTasks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tasks"]) -> 'TimeTrackingPrivateBetaCreateProjectTaskRequestTasks': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "billable", "allowAllEmployees", "employeeIds", "hasTasks", "tasks", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billable"]) -> typing.Union[MetaOapg.properties.billable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowAllEmployees"]) -> typing.Union[MetaOapg.properties.allowAllEmployees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeIds"]) -> typing.Union['TimeTrackingPrivateBetaCreateProjectTaskRequestEmployeeIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasTasks"]) -> typing.Union[MetaOapg.properties.hasTasks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tasks"]) -> typing.Union['TimeTrackingPrivateBetaCreateProjectTaskRequestTasks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "billable", "allowAllEmployees", "employeeIds", "hasTasks", "tasks", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        billable: typing.Union[MetaOapg.properties.billable, bool, schemas.Unset] = schemas.unset,
        allowAllEmployees: typing.Union[MetaOapg.properties.allowAllEmployees, bool, schemas.Unset] = schemas.unset,
        employeeIds: typing.Union['TimeTrackingPrivateBetaCreateProjectTaskRequestEmployeeIds', schemas.Unset] = schemas.unset,
        hasTasks: typing.Union[MetaOapg.properties.hasTasks, bool, schemas.Unset] = schemas.unset,
        tasks: typing.Union['TimeTrackingPrivateBetaCreateProjectTaskRequestTasks', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeTrackingPrivateBetaCreateProjectTaskRequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            billable=billable,
            allowAllEmployees=allowAllEmployees,
            employeeIds=employeeIds,
            hasTasks=hasTasks,
            tasks=tasks,
            _configuration=_configuration,
            **kwargs,
        )

from bamboo_hr_python_sdk.model.time_tracking_private_beta_create_project_task_request_employee_ids import TimeTrackingPrivateBetaCreateProjectTaskRequestEmployeeIds
from bamboo_hr_python_sdk.model.time_tracking_private_beta_create_project_task_request_tasks import TimeTrackingPrivateBetaCreateProjectTaskRequestTasks
