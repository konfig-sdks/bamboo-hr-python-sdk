# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class NewWebHook(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "name",
            "monitorFields",
            "postFields",
            "url",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def monitorFields() -> typing.Type['NewWebHookMonitorFields']:
                return NewWebHookMonitorFields
        
            @staticmethod
            def postFields() -> typing.Type['NewWebHookPostFields']:
                return NewWebHookPostFields
            
            
            class url(
                schemas.StrSchema
            ):
                pass
            
            
            class format(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def JSON(cls):
                    return cls("json")
                
                @schemas.classproperty
                def FORMENCODED(cls):
                    return cls("form-encoded")
        
            @staticmethod
            def frequency() -> typing.Type['NewWebHookFrequency']:
                return NewWebHookFrequency
        
            @staticmethod
            def limit() -> typing.Type['NewWebHookLimit']:
                return NewWebHookLimit
            includeCompanyDomain = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "monitorFields": monitorFields,
                "postFields": postFields,
                "url": url,
                "format": format,
                "frequency": frequency,
                "limit": limit,
                "includeCompanyDomain": includeCompanyDomain,
            }
    
    name: MetaOapg.properties.name
    monitorFields: 'NewWebHookMonitorFields'
    postFields: 'NewWebHookPostFields'
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monitorFields"]) -> 'NewWebHookMonitorFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postFields"]) -> 'NewWebHookPostFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> 'NewWebHookFrequency': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> 'NewWebHookLimit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeCompanyDomain"]) -> MetaOapg.properties.includeCompanyDomain: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "monitorFields", "postFields", "url", "format", "frequency", "limit", "includeCompanyDomain", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monitorFields"]) -> 'NewWebHookMonitorFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postFields"]) -> 'NewWebHookPostFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union[MetaOapg.properties.format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union['NewWebHookFrequency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union['NewWebHookLimit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeCompanyDomain"]) -> typing.Union[MetaOapg.properties.includeCompanyDomain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "monitorFields", "postFields", "url", "format", "frequency", "limit", "includeCompanyDomain", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        monitorFields: 'NewWebHookMonitorFields',
        postFields: 'NewWebHookPostFields',
        url: typing.Union[MetaOapg.properties.url, str, ],
        format: typing.Union[MetaOapg.properties.format, str, schemas.Unset] = schemas.unset,
        frequency: typing.Union['NewWebHookFrequency', schemas.Unset] = schemas.unset,
        limit: typing.Union['NewWebHookLimit', schemas.Unset] = schemas.unset,
        includeCompanyDomain: typing.Union[MetaOapg.properties.includeCompanyDomain, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NewWebHook':
        return super().__new__(
            cls,
            *args,
            name=name,
            monitorFields=monitorFields,
            postFields=postFields,
            url=url,
            format=format,
            frequency=frequency,
            limit=limit,
            includeCompanyDomain=includeCompanyDomain,
            _configuration=_configuration,
            **kwargs,
        )

from bamboo_hr_python_sdk.model.new_web_hook_frequency import NewWebHookFrequency
from bamboo_hr_python_sdk.model.new_web_hook_limit import NewWebHookLimit
from bamboo_hr_python_sdk.model.new_web_hook_monitor_fields import NewWebHookMonitorFields
from bamboo_hr_python_sdk.model.new_web_hook_post_fields import NewWebHookPostFields
