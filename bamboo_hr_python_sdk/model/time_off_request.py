# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class TimeOffRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class status(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
            
            
            class start(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
            
            
            class end(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
            timeOffTypeId = schemas.IntSchema
            amount = schemas.IntSchema
        
            @staticmethod
            def notes() -> typing.Type['TimeOffRequestNotes']:
                return TimeOffRequestNotes
        
            @staticmethod
            def dates() -> typing.Type['TimeOffRequestDates']:
                return TimeOffRequestDates
            previousRequest = schemas.IntSchema
            __annotations__ = {
                "status": status,
                "start": start,
                "end": end,
                "timeOffTypeId": timeOffTypeId,
                "amount": amount,
                "notes": notes,
                "dates": dates,
                "previousRequest": previousRequest,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeOffTypeId"]) -> MetaOapg.properties.timeOffTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> 'TimeOffRequestNotes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dates"]) -> 'TimeOffRequestDates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previousRequest"]) -> MetaOapg.properties.previousRequest: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "start", "end", "timeOffTypeId", "amount", "notes", "dates", "previousRequest", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeOffTypeId"]) -> typing.Union[MetaOapg.properties.timeOffTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union['TimeOffRequestNotes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dates"]) -> typing.Union['TimeOffRequestDates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previousRequest"]) -> typing.Union[MetaOapg.properties.previousRequest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "start", "end", "timeOffTypeId", "amount", "notes", "dates", "previousRequest", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        start: typing.Union[MetaOapg.properties.start, str, schemas.Unset] = schemas.unset,
        end: typing.Union[MetaOapg.properties.end, str, schemas.Unset] = schemas.unset,
        timeOffTypeId: typing.Union[MetaOapg.properties.timeOffTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        notes: typing.Union['TimeOffRequestNotes', schemas.Unset] = schemas.unset,
        dates: typing.Union['TimeOffRequestDates', schemas.Unset] = schemas.unset,
        previousRequest: typing.Union[MetaOapg.properties.previousRequest, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeOffRequest':
        return super().__new__(
            cls,
            *args,
            status=status,
            start=start,
            end=end,
            timeOffTypeId=timeOffTypeId,
            amount=amount,
            notes=notes,
            dates=dates,
            previousRequest=previousRequest,
            _configuration=_configuration,
            **kwargs,
        )

from bamboo_hr_python_sdk.model.time_off_request_dates import TimeOffRequestDates
from bamboo_hr_python_sdk.model.time_off_request_notes import TimeOffRequestNotes
