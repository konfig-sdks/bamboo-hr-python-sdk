# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class TrainingUpdateTypeRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "name",
            "required",
        }
        
        class properties:
            name = schemas.StrSchema
            required = schemas.BoolSchema
            description = schemas.StrSchema
            frequency = schemas.IntSchema
            renewable = schemas.BoolSchema
        
            @staticmethod
            def category() -> typing.Type['TrainingUpdateTypeRequestCategory']:
                return TrainingUpdateTypeRequestCategory
            dueFromHireDate = schemas.IntSchema
            linkUrl = schemas.StrSchema
            allowEmployeesToMarkComplete = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "required": required,
                "description": description,
                "frequency": frequency,
                "renewable": renewable,
                "category": category,
                "dueFromHireDate": dueFromHireDate,
                "linkUrl": linkUrl,
                "allowEmployeesToMarkComplete": allowEmployeesToMarkComplete,
            }
    
    name: MetaOapg.properties.name
    required: MetaOapg.properties.required
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renewable"]) -> MetaOapg.properties.renewable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'TrainingUpdateTypeRequestCategory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dueFromHireDate"]) -> MetaOapg.properties.dueFromHireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linkUrl"]) -> MetaOapg.properties.linkUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowEmployeesToMarkComplete"]) -> MetaOapg.properties.allowEmployeesToMarkComplete: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "required", "description", "frequency", "renewable", "category", "dueFromHireDate", "linkUrl", "allowEmployeesToMarkComplete", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union[MetaOapg.properties.frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renewable"]) -> typing.Union[MetaOapg.properties.renewable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union['TrainingUpdateTypeRequestCategory', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dueFromHireDate"]) -> typing.Union[MetaOapg.properties.dueFromHireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linkUrl"]) -> typing.Union[MetaOapg.properties.linkUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowEmployeesToMarkComplete"]) -> typing.Union[MetaOapg.properties.allowEmployeesToMarkComplete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "required", "description", "frequency", "renewable", "category", "dueFromHireDate", "linkUrl", "allowEmployeesToMarkComplete", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        required: typing.Union[MetaOapg.properties.required, bool, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        frequency: typing.Union[MetaOapg.properties.frequency, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        renewable: typing.Union[MetaOapg.properties.renewable, bool, schemas.Unset] = schemas.unset,
        category: typing.Union['TrainingUpdateTypeRequestCategory', schemas.Unset] = schemas.unset,
        dueFromHireDate: typing.Union[MetaOapg.properties.dueFromHireDate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        linkUrl: typing.Union[MetaOapg.properties.linkUrl, str, schemas.Unset] = schemas.unset,
        allowEmployeesToMarkComplete: typing.Union[MetaOapg.properties.allowEmployeesToMarkComplete, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TrainingUpdateTypeRequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            required=required,
            description=description,
            frequency=frequency,
            renewable=renewable,
            category=category,
            dueFromHireDate=dueFromHireDate,
            linkUrl=linkUrl,
            allowEmployeesToMarkComplete=allowEmployeesToMarkComplete,
            _configuration=_configuration,
            **kwargs,
        )

from bamboo_hr_python_sdk.model.training_update_type_request_category import TrainingUpdateTypeRequestCategory
