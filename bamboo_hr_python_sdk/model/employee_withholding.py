# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class EmployeeWithholding(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            fedWithholding = schemas.StrSchema
            stateWithholding = schemas.StrSchema
            localWithholding = schemas.StrSchema
            additionalFed = schemas.StrSchema
            additionalState = schemas.StrSchema
            additionalLocal = schemas.StrSchema
            taxState = schemas.StrSchema
            taxLocal = schemas.StrSchema
            __annotations__ = {
                "fedWithholding": fedWithholding,
                "stateWithholding": stateWithholding,
                "localWithholding": localWithholding,
                "additionalFed": additionalFed,
                "additionalState": additionalState,
                "additionalLocal": additionalLocal,
                "taxState": taxState,
                "taxLocal": taxLocal,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fedWithholding"]) -> MetaOapg.properties.fedWithholding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateWithholding"]) -> MetaOapg.properties.stateWithholding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localWithholding"]) -> MetaOapg.properties.localWithholding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalFed"]) -> MetaOapg.properties.additionalFed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalState"]) -> MetaOapg.properties.additionalState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalLocal"]) -> MetaOapg.properties.additionalLocal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxState"]) -> MetaOapg.properties.taxState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxLocal"]) -> MetaOapg.properties.taxLocal: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fedWithholding", "stateWithholding", "localWithholding", "additionalFed", "additionalState", "additionalLocal", "taxState", "taxLocal", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fedWithholding"]) -> typing.Union[MetaOapg.properties.fedWithholding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateWithholding"]) -> typing.Union[MetaOapg.properties.stateWithholding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localWithholding"]) -> typing.Union[MetaOapg.properties.localWithholding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalFed"]) -> typing.Union[MetaOapg.properties.additionalFed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalState"]) -> typing.Union[MetaOapg.properties.additionalState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalLocal"]) -> typing.Union[MetaOapg.properties.additionalLocal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxState"]) -> typing.Union[MetaOapg.properties.taxState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxLocal"]) -> typing.Union[MetaOapg.properties.taxLocal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fedWithholding", "stateWithholding", "localWithholding", "additionalFed", "additionalState", "additionalLocal", "taxState", "taxLocal", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fedWithholding: typing.Union[MetaOapg.properties.fedWithholding, str, schemas.Unset] = schemas.unset,
        stateWithholding: typing.Union[MetaOapg.properties.stateWithholding, str, schemas.Unset] = schemas.unset,
        localWithholding: typing.Union[MetaOapg.properties.localWithholding, str, schemas.Unset] = schemas.unset,
        additionalFed: typing.Union[MetaOapg.properties.additionalFed, str, schemas.Unset] = schemas.unset,
        additionalState: typing.Union[MetaOapg.properties.additionalState, str, schemas.Unset] = schemas.unset,
        additionalLocal: typing.Union[MetaOapg.properties.additionalLocal, str, schemas.Unset] = schemas.unset,
        taxState: typing.Union[MetaOapg.properties.taxState, str, schemas.Unset] = schemas.unset,
        taxLocal: typing.Union[MetaOapg.properties.taxLocal, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeWithholding':
        return super().__new__(
            cls,
            *args,
            fedWithholding=fedWithholding,
            stateWithholding=stateWithholding,
            localWithholding=localWithholding,
            additionalFed=additionalFed,
            additionalState=additionalState,
            additionalLocal=additionalLocal,
            taxState=taxState,
            taxLocal=taxLocal,
            _configuration=_configuration,
            **kwargs,
        )
