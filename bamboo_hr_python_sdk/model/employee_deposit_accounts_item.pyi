# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class EmployeeDepositAccountsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            accountType = schemas.StrSchema
            maskedAccountNumber = schemas.StrSchema
            bankName = schemas.StrSchema
            depositOrder = schemas.StrSchema
            ruleType = schemas.StrSchema
            ruleAmount = schemas.StrSchema
            __annotations__ = {
                "accountType": accountType,
                "maskedAccountNumber": maskedAccountNumber,
                "bankName": bankName,
                "depositOrder": depositOrder,
                "ruleType": ruleType,
                "ruleAmount": ruleAmount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountType"]) -> MetaOapg.properties.accountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maskedAccountNumber"]) -> MetaOapg.properties.maskedAccountNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankName"]) -> MetaOapg.properties.bankName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depositOrder"]) -> MetaOapg.properties.depositOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ruleType"]) -> MetaOapg.properties.ruleType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ruleAmount"]) -> MetaOapg.properties.ruleAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountType", "maskedAccountNumber", "bankName", "depositOrder", "ruleType", "ruleAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountType"]) -> typing.Union[MetaOapg.properties.accountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maskedAccountNumber"]) -> typing.Union[MetaOapg.properties.maskedAccountNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankName"]) -> typing.Union[MetaOapg.properties.bankName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depositOrder"]) -> typing.Union[MetaOapg.properties.depositOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ruleType"]) -> typing.Union[MetaOapg.properties.ruleType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ruleAmount"]) -> typing.Union[MetaOapg.properties.ruleAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountType", "maskedAccountNumber", "bankName", "depositOrder", "ruleType", "ruleAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountType: typing.Union[MetaOapg.properties.accountType, str, schemas.Unset] = schemas.unset,
        maskedAccountNumber: typing.Union[MetaOapg.properties.maskedAccountNumber, str, schemas.Unset] = schemas.unset,
        bankName: typing.Union[MetaOapg.properties.bankName, str, schemas.Unset] = schemas.unset,
        depositOrder: typing.Union[MetaOapg.properties.depositOrder, str, schemas.Unset] = schemas.unset,
        ruleType: typing.Union[MetaOapg.properties.ruleType, str, schemas.Unset] = schemas.unset,
        ruleAmount: typing.Union[MetaOapg.properties.ruleAmount, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeDepositAccountsItem':
        return super().__new__(
            cls,
            *args,
            accountType=accountType,
            maskedAccountNumber=maskedAccountNumber,
            bankName=bankName,
            depositOrder=depositOrder,
            ruleType=ruleType,
            ruleAmount=ruleAmount,
            _configuration=_configuration,
            **kwargs,
        )
