# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class BenefitPlanCoverage(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            benefitPlanId = schemas.StrSchema
            benefitCoverageId = schemas.StrSchema
            totalCost = schemas.StrSchema
            currencyType = schemas.StrSchema
            startYmd = schemas.StrSchema
            endYmd = schemas.StrSchema
            __annotations__ = {
                "benefitPlanId": benefitPlanId,
                "benefitCoverageId": benefitCoverageId,
                "totalCost": totalCost,
                "currencyType": currencyType,
                "startYmd": startYmd,
                "endYmd": endYmd,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitPlanId"]) -> MetaOapg.properties.benefitPlanId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitCoverageId"]) -> MetaOapg.properties.benefitCoverageId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCost"]) -> MetaOapg.properties.totalCost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyType"]) -> MetaOapg.properties.currencyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startYmd"]) -> MetaOapg.properties.startYmd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endYmd"]) -> MetaOapg.properties.endYmd: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["benefitPlanId", "benefitCoverageId", "totalCost", "currencyType", "startYmd", "endYmd", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitPlanId"]) -> typing.Union[MetaOapg.properties.benefitPlanId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitCoverageId"]) -> typing.Union[MetaOapg.properties.benefitCoverageId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCost"]) -> typing.Union[MetaOapg.properties.totalCost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyType"]) -> typing.Union[MetaOapg.properties.currencyType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startYmd"]) -> typing.Union[MetaOapg.properties.startYmd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endYmd"]) -> typing.Union[MetaOapg.properties.endYmd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["benefitPlanId", "benefitCoverageId", "totalCost", "currencyType", "startYmd", "endYmd", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        benefitPlanId: typing.Union[MetaOapg.properties.benefitPlanId, str, schemas.Unset] = schemas.unset,
        benefitCoverageId: typing.Union[MetaOapg.properties.benefitCoverageId, str, schemas.Unset] = schemas.unset,
        totalCost: typing.Union[MetaOapg.properties.totalCost, str, schemas.Unset] = schemas.unset,
        currencyType: typing.Union[MetaOapg.properties.currencyType, str, schemas.Unset] = schemas.unset,
        startYmd: typing.Union[MetaOapg.properties.startYmd, str, schemas.Unset] = schemas.unset,
        endYmd: typing.Union[MetaOapg.properties.endYmd, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BenefitPlanCoverage':
        return super().__new__(
            cls,
            *args,
            benefitPlanId=benefitPlanId,
            benefitCoverageId=benefitCoverageId,
            totalCost=totalCost,
            currencyType=currencyType,
            startYmd=startYmd,
            endYmd=endYmd,
            _configuration=_configuration,
            **kwargs,
        )
