# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class WebHookLogResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            webhookId = schemas.IntSchema
            url = schemas.StrSchema
            lastAttempted = schemas.StrSchema
            lastSuccess = schemas.StrSchema
            failureCount = schemas.IntSchema
            status = schemas.IntSchema
        
            @staticmethod
            def employeeIds() -> typing.Type['WebHookLogResponseEmployeeIds']:
                return WebHookLogResponseEmployeeIds
            __annotations__ = {
                "webhookId": webhookId,
                "url": url,
                "lastAttempted": lastAttempted,
                "lastSuccess": lastSuccess,
                "failureCount": failureCount,
                "status": status,
                "employeeIds": employeeIds,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhookId"]) -> MetaOapg.properties.webhookId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastAttempted"]) -> MetaOapg.properties.lastAttempted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastSuccess"]) -> MetaOapg.properties.lastSuccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failureCount"]) -> MetaOapg.properties.failureCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeIds"]) -> 'WebHookLogResponseEmployeeIds': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["webhookId", "url", "lastAttempted", "lastSuccess", "failureCount", "status", "employeeIds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhookId"]) -> typing.Union[MetaOapg.properties.webhookId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastAttempted"]) -> typing.Union[MetaOapg.properties.lastAttempted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastSuccess"]) -> typing.Union[MetaOapg.properties.lastSuccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failureCount"]) -> typing.Union[MetaOapg.properties.failureCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeIds"]) -> typing.Union['WebHookLogResponseEmployeeIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["webhookId", "url", "lastAttempted", "lastSuccess", "failureCount", "status", "employeeIds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        webhookId: typing.Union[MetaOapg.properties.webhookId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        lastAttempted: typing.Union[MetaOapg.properties.lastAttempted, str, schemas.Unset] = schemas.unset,
        lastSuccess: typing.Union[MetaOapg.properties.lastSuccess, str, schemas.Unset] = schemas.unset,
        failureCount: typing.Union[MetaOapg.properties.failureCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        employeeIds: typing.Union['WebHookLogResponseEmployeeIds', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebHookLogResponse':
        return super().__new__(
            cls,
            *args,
            webhookId=webhookId,
            url=url,
            lastAttempted=lastAttempted,
            lastSuccess=lastSuccess,
            failureCount=failureCount,
            status=status,
            employeeIds=employeeIds,
            _configuration=_configuration,
            **kwargs,
        )

from bamboo_hr_python_sdk.model.web_hook_log_response_employee_ids import WebHookLogResponseEmployeeIds
