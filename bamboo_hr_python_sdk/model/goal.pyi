# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class Goal(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "id",
            "title",
        }
        
        class properties:
            
            
            class title(
                schemas.StrSchema
            ):
                pass
            id = schemas.IntSchema
            
            
            class description(
                schemas.StrSchema
            ):
                pass
            percentComplete = schemas.IntSchema
            alignsWithOptionId = schemas.StrSchema
        
            @staticmethod
            def sharedWithEmployeeIds() -> typing.Type['GoalSharedWithEmployeeIds']:
                return GoalSharedWithEmployeeIds
            dueDate = schemas.StrSchema
            completionDate = schemas.Float32Schema
            __annotations__ = {
                "title": title,
                "id": id,
                "description": description,
                "percentComplete": percentComplete,
                "alignsWithOptionId": alignsWithOptionId,
                "sharedWithEmployeeIds": sharedWithEmployeeIds,
                "dueDate": dueDate,
                "completionDate": completionDate,
            }
    
    id: MetaOapg.properties.id
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percentComplete"]) -> MetaOapg.properties.percentComplete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alignsWithOptionId"]) -> MetaOapg.properties.alignsWithOptionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharedWithEmployeeIds"]) -> 'GoalSharedWithEmployeeIds': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dueDate"]) -> MetaOapg.properties.dueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionDate"]) -> MetaOapg.properties.completionDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "description", "percentComplete", "alignsWithOptionId", "sharedWithEmployeeIds", "dueDate", "completionDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percentComplete"]) -> typing.Union[MetaOapg.properties.percentComplete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alignsWithOptionId"]) -> typing.Union[MetaOapg.properties.alignsWithOptionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharedWithEmployeeIds"]) -> typing.Union['GoalSharedWithEmployeeIds', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dueDate"]) -> typing.Union[MetaOapg.properties.dueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionDate"]) -> typing.Union[MetaOapg.properties.completionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "description", "percentComplete", "alignsWithOptionId", "sharedWithEmployeeIds", "dueDate", "completionDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        percentComplete: typing.Union[MetaOapg.properties.percentComplete, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        alignsWithOptionId: typing.Union[MetaOapg.properties.alignsWithOptionId, str, schemas.Unset] = schemas.unset,
        sharedWithEmployeeIds: typing.Union['GoalSharedWithEmployeeIds', schemas.Unset] = schemas.unset,
        dueDate: typing.Union[MetaOapg.properties.dueDate, str, schemas.Unset] = schemas.unset,
        completionDate: typing.Union[MetaOapg.properties.completionDate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Goal':
        return super().__new__(
            cls,
            *args,
            id=id,
            title=title,
            description=description,
            percentComplete=percentComplete,
            alignsWithOptionId=alignsWithOptionId,
            sharedWithEmployeeIds=sharedWithEmployeeIds,
            dueDate=dueDate,
            completionDate=completionDate,
            _configuration=_configuration,
            **kwargs,
        )

from bamboo_hr_python_sdk.model.goal_shared_with_employee_ids import GoalSharedWithEmployeeIds
