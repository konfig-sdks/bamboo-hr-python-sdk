# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class ApplicantTrackingGetJobSummariesResponseItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def title() -> typing.Type['ApplicantTrackingGetJobSummariesResponseItemTitle']:
                return ApplicantTrackingGetJobSummariesResponseItemTitle
            postedDate = schemas.StrSchema
        
            @staticmethod
            def location() -> typing.Type['ApplicantTrackingGetJobSummariesResponseItemLocation']:
                return ApplicantTrackingGetJobSummariesResponseItemLocation
        
            @staticmethod
            def department() -> typing.Type['ApplicantTrackingGetJobSummariesResponseItemDepartment']:
                return ApplicantTrackingGetJobSummariesResponseItemDepartment
        
            @staticmethod
            def status() -> typing.Type['ApplicantTrackingGetJobSummariesResponseItemStatus']:
                return ApplicantTrackingGetJobSummariesResponseItemStatus
            newApplicantsCount = schemas.NumberSchema
            activeApplicantsCount = schemas.NumberSchema
            totalApplicantsCount = schemas.NumberSchema
            id = schemas.NumberSchema
            postingUrl = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "postedDate": postedDate,
                "location": location,
                "department": department,
                "status": status,
                "newApplicantsCount": newApplicantsCount,
                "activeApplicantsCount": activeApplicantsCount,
                "totalApplicantsCount": totalApplicantsCount,
                "id": id,
                "postingUrl": postingUrl,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> 'ApplicantTrackingGetJobSummariesResponseItemTitle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postedDate"]) -> MetaOapg.properties.postedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'ApplicantTrackingGetJobSummariesResponseItemLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> 'ApplicantTrackingGetJobSummariesResponseItemDepartment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ApplicantTrackingGetJobSummariesResponseItemStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newApplicantsCount"]) -> MetaOapg.properties.newApplicantsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeApplicantsCount"]) -> MetaOapg.properties.activeApplicantsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalApplicantsCount"]) -> MetaOapg.properties.totalApplicantsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postingUrl"]) -> MetaOapg.properties.postingUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "postedDate", "location", "department", "status", "newApplicantsCount", "activeApplicantsCount", "totalApplicantsCount", "id", "postingUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union['ApplicantTrackingGetJobSummariesResponseItemTitle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postedDate"]) -> typing.Union[MetaOapg.properties.postedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['ApplicantTrackingGetJobSummariesResponseItemLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union['ApplicantTrackingGetJobSummariesResponseItemDepartment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['ApplicantTrackingGetJobSummariesResponseItemStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newApplicantsCount"]) -> typing.Union[MetaOapg.properties.newApplicantsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeApplicantsCount"]) -> typing.Union[MetaOapg.properties.activeApplicantsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalApplicantsCount"]) -> typing.Union[MetaOapg.properties.totalApplicantsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postingUrl"]) -> typing.Union[MetaOapg.properties.postingUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "postedDate", "location", "department", "status", "newApplicantsCount", "activeApplicantsCount", "totalApplicantsCount", "id", "postingUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union['ApplicantTrackingGetJobSummariesResponseItemTitle', schemas.Unset] = schemas.unset,
        postedDate: typing.Union[MetaOapg.properties.postedDate, str, schemas.Unset] = schemas.unset,
        location: typing.Union['ApplicantTrackingGetJobSummariesResponseItemLocation', schemas.Unset] = schemas.unset,
        department: typing.Union['ApplicantTrackingGetJobSummariesResponseItemDepartment', schemas.Unset] = schemas.unset,
        status: typing.Union['ApplicantTrackingGetJobSummariesResponseItemStatus', schemas.Unset] = schemas.unset,
        newApplicantsCount: typing.Union[MetaOapg.properties.newApplicantsCount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        activeApplicantsCount: typing.Union[MetaOapg.properties.activeApplicantsCount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalApplicantsCount: typing.Union[MetaOapg.properties.totalApplicantsCount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        postingUrl: typing.Union[MetaOapg.properties.postingUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplicantTrackingGetJobSummariesResponseItem':
        return super().__new__(
            cls,
            *args,
            title=title,
            postedDate=postedDate,
            location=location,
            department=department,
            status=status,
            newApplicantsCount=newApplicantsCount,
            activeApplicantsCount=activeApplicantsCount,
            totalApplicantsCount=totalApplicantsCount,
            id=id,
            postingUrl=postingUrl,
            _configuration=_configuration,
            **kwargs,
        )

from bamboo_hr_python_sdk.model.applicant_tracking_get_job_summaries_response_item_department import ApplicantTrackingGetJobSummariesResponseItemDepartment
from bamboo_hr_python_sdk.model.applicant_tracking_get_job_summaries_response_item_location import ApplicantTrackingGetJobSummariesResponseItemLocation
from bamboo_hr_python_sdk.model.applicant_tracking_get_job_summaries_response_item_status import ApplicantTrackingGetJobSummariesResponseItemStatus
from bamboo_hr_python_sdk.model.applicant_tracking_get_job_summaries_response_item_title import ApplicantTrackingGetJobSummariesResponseItemTitle
