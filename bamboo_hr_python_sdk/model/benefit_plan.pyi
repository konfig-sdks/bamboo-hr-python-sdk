# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class BenefitPlan(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            name = schemas.StrSchema
            type = schemas.StrSchema
            deductionTypeId = schemas.StrSchema
            startYmd = schemas.StrSchema
            endYmd = schemas.StrSchema
            url = schemas.StrSchema
            meetAcaMin = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "name": name,
                "type": type,
                "deductionTypeId": deductionTypeId,
                "startYmd": startYmd,
                "endYmd": endYmd,
                "url": url,
                "meetAcaMin": meetAcaMin,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionTypeId"]) -> MetaOapg.properties.deductionTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startYmd"]) -> MetaOapg.properties.startYmd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endYmd"]) -> MetaOapg.properties.endYmd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meetAcaMin"]) -> MetaOapg.properties.meetAcaMin: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "name", "type", "deductionTypeId", "startYmd", "endYmd", "url", "meetAcaMin", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionTypeId"]) -> typing.Union[MetaOapg.properties.deductionTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startYmd"]) -> typing.Union[MetaOapg.properties.startYmd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endYmd"]) -> typing.Union[MetaOapg.properties.endYmd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meetAcaMin"]) -> typing.Union[MetaOapg.properties.meetAcaMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "name", "type", "deductionTypeId", "startYmd", "endYmd", "url", "meetAcaMin", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        deductionTypeId: typing.Union[MetaOapg.properties.deductionTypeId, str, schemas.Unset] = schemas.unset,
        startYmd: typing.Union[MetaOapg.properties.startYmd, str, schemas.Unset] = schemas.unset,
        endYmd: typing.Union[MetaOapg.properties.endYmd, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        meetAcaMin: typing.Union[MetaOapg.properties.meetAcaMin, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BenefitPlan':
        return super().__new__(
            cls,
            *args,
            description=description,
            name=name,
            type=type,
            deductionTypeId=deductionTypeId,
            startYmd=startYmd,
            endYmd=endYmd,
            url=url,
            meetAcaMin=meetAcaMin,
            _configuration=_configuration,
            **kwargs,
        )
