# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class EmployeePaystub(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            employeeId = schemas.StrSchema
            externalRecordId = schemas.StrSchema
            payPeriodFrom = schemas.StrSchema
            payPeriodTo = schemas.StrSchema
            payDate = schemas.StrSchema
            payorName = schemas.StrSchema
            payorAdd1 = schemas.StrSchema
            payorAdd2 = schemas.StrSchema
            payorCity = schemas.StrSchema
            payorState = schemas.StrSchema
            payorZip = schemas.StrSchema
            payeeName = schemas.StrSchema
            currencyCode = schemas.StrSchema
            net = schemas.StrSchema
            gross = schemas.StrSchema
            totalTaxes = schemas.StrSchema
            totalDeductions = schemas.StrSchema
            ytdNet = schemas.StrSchema
            ytdGross = schemas.StrSchema
            ytdTaxes = schemas.StrSchema
            ytdDeductions = schemas.StrSchema
            fedWitholding = schemas.StrSchema
            
            
            class federalType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def _2020_W4(cls):
                    return cls("2020_w4")
                
                @schemas.classproperty
                def PRE_2020_W4(cls):
                    return cls("pre_2020_w4")
            twoJobs = schemas.StrSchema
            dependentsAmount = schemas.StrSchema
            otherIncome = schemas.StrSchema
            deductionsAmount = schemas.StrSchema
            stateWithholding = schemas.StrSchema
            localWithholding = schemas.StrSchema
            additionalFed = schemas.StrSchema
            additionalState = schemas.StrSchema
            additionalLocal = schemas.StrSchema
            taxState = schemas.StrSchema
            taxLocal = schemas.StrSchema
        
            @staticmethod
            def wages() -> typing.Type['EmployeePaystubWages']:
                return EmployeePaystubWages
        
            @staticmethod
            def taxes() -> typing.Type['EmployeePaystubTaxes']:
                return EmployeePaystubTaxes
        
            @staticmethod
            def deductions() -> typing.Type['EmployeePaystubDeductions']:
                return EmployeePaystubDeductions
        
            @staticmethod
            def deposits() -> typing.Type['EmployeePaystubDeposits']:
                return EmployeePaystubDeposits
            __annotations__ = {
                "employeeId": employeeId,
                "externalRecordId": externalRecordId,
                "payPeriodFrom": payPeriodFrom,
                "payPeriodTo": payPeriodTo,
                "payDate": payDate,
                "payorName": payorName,
                "payorAdd1": payorAdd1,
                "payorAdd2": payorAdd2,
                "payorCity": payorCity,
                "payorState": payorState,
                "payorZip": payorZip,
                "payeeName": payeeName,
                "currencyCode": currencyCode,
                "net": net,
                "gross": gross,
                "totalTaxes": totalTaxes,
                "totalDeductions": totalDeductions,
                "ytdNet": ytdNet,
                "ytdGross": ytdGross,
                "ytdTaxes": ytdTaxes,
                "ytdDeductions": ytdDeductions,
                "fedWitholding": fedWitholding,
                "federalType": federalType,
                "twoJobs": twoJobs,
                "dependentsAmount": dependentsAmount,
                "otherIncome": otherIncome,
                "deductionsAmount": deductionsAmount,
                "stateWithholding": stateWithholding,
                "localWithholding": localWithholding,
                "additionalFed": additionalFed,
                "additionalState": additionalState,
                "additionalLocal": additionalLocal,
                "taxState": taxState,
                "taxLocal": taxLocal,
                "wages": wages,
                "taxes": taxes,
                "deductions": deductions,
                "deposits": deposits,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalRecordId"]) -> MetaOapg.properties.externalRecordId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriodFrom"]) -> MetaOapg.properties.payPeriodFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriodTo"]) -> MetaOapg.properties.payPeriodTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payDate"]) -> MetaOapg.properties.payDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payorName"]) -> MetaOapg.properties.payorName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payorAdd1"]) -> MetaOapg.properties.payorAdd1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payorAdd2"]) -> MetaOapg.properties.payorAdd2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payorCity"]) -> MetaOapg.properties.payorCity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payorState"]) -> MetaOapg.properties.payorState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payorZip"]) -> MetaOapg.properties.payorZip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payeeName"]) -> MetaOapg.properties.payeeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["net"]) -> MetaOapg.properties.net: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gross"]) -> MetaOapg.properties.gross: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalTaxes"]) -> MetaOapg.properties.totalTaxes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalDeductions"]) -> MetaOapg.properties.totalDeductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ytdNet"]) -> MetaOapg.properties.ytdNet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ytdGross"]) -> MetaOapg.properties.ytdGross: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ytdTaxes"]) -> MetaOapg.properties.ytdTaxes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ytdDeductions"]) -> MetaOapg.properties.ytdDeductions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fedWitholding"]) -> MetaOapg.properties.fedWitholding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federalType"]) -> MetaOapg.properties.federalType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["twoJobs"]) -> MetaOapg.properties.twoJobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependentsAmount"]) -> MetaOapg.properties.dependentsAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherIncome"]) -> MetaOapg.properties.otherIncome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionsAmount"]) -> MetaOapg.properties.deductionsAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateWithholding"]) -> MetaOapg.properties.stateWithholding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localWithholding"]) -> MetaOapg.properties.localWithholding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalFed"]) -> MetaOapg.properties.additionalFed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalState"]) -> MetaOapg.properties.additionalState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalLocal"]) -> MetaOapg.properties.additionalLocal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxState"]) -> MetaOapg.properties.taxState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxLocal"]) -> MetaOapg.properties.taxLocal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wages"]) -> 'EmployeePaystubWages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxes"]) -> 'EmployeePaystubTaxes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductions"]) -> 'EmployeePaystubDeductions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deposits"]) -> 'EmployeePaystubDeposits': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["employeeId", "externalRecordId", "payPeriodFrom", "payPeriodTo", "payDate", "payorName", "payorAdd1", "payorAdd2", "payorCity", "payorState", "payorZip", "payeeName", "currencyCode", "net", "gross", "totalTaxes", "totalDeductions", "ytdNet", "ytdGross", "ytdTaxes", "ytdDeductions", "fedWitholding", "federalType", "twoJobs", "dependentsAmount", "otherIncome", "deductionsAmount", "stateWithholding", "localWithholding", "additionalFed", "additionalState", "additionalLocal", "taxState", "taxLocal", "wages", "taxes", "deductions", "deposits", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalRecordId"]) -> typing.Union[MetaOapg.properties.externalRecordId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriodFrom"]) -> typing.Union[MetaOapg.properties.payPeriodFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriodTo"]) -> typing.Union[MetaOapg.properties.payPeriodTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payDate"]) -> typing.Union[MetaOapg.properties.payDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payorName"]) -> typing.Union[MetaOapg.properties.payorName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payorAdd1"]) -> typing.Union[MetaOapg.properties.payorAdd1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payorAdd2"]) -> typing.Union[MetaOapg.properties.payorAdd2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payorCity"]) -> typing.Union[MetaOapg.properties.payorCity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payorState"]) -> typing.Union[MetaOapg.properties.payorState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payorZip"]) -> typing.Union[MetaOapg.properties.payorZip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payeeName"]) -> typing.Union[MetaOapg.properties.payeeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["net"]) -> typing.Union[MetaOapg.properties.net, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gross"]) -> typing.Union[MetaOapg.properties.gross, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalTaxes"]) -> typing.Union[MetaOapg.properties.totalTaxes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalDeductions"]) -> typing.Union[MetaOapg.properties.totalDeductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ytdNet"]) -> typing.Union[MetaOapg.properties.ytdNet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ytdGross"]) -> typing.Union[MetaOapg.properties.ytdGross, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ytdTaxes"]) -> typing.Union[MetaOapg.properties.ytdTaxes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ytdDeductions"]) -> typing.Union[MetaOapg.properties.ytdDeductions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fedWitholding"]) -> typing.Union[MetaOapg.properties.fedWitholding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federalType"]) -> typing.Union[MetaOapg.properties.federalType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["twoJobs"]) -> typing.Union[MetaOapg.properties.twoJobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependentsAmount"]) -> typing.Union[MetaOapg.properties.dependentsAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherIncome"]) -> typing.Union[MetaOapg.properties.otherIncome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionsAmount"]) -> typing.Union[MetaOapg.properties.deductionsAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateWithholding"]) -> typing.Union[MetaOapg.properties.stateWithholding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localWithholding"]) -> typing.Union[MetaOapg.properties.localWithholding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalFed"]) -> typing.Union[MetaOapg.properties.additionalFed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalState"]) -> typing.Union[MetaOapg.properties.additionalState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalLocal"]) -> typing.Union[MetaOapg.properties.additionalLocal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxState"]) -> typing.Union[MetaOapg.properties.taxState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxLocal"]) -> typing.Union[MetaOapg.properties.taxLocal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wages"]) -> typing.Union['EmployeePaystubWages', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxes"]) -> typing.Union['EmployeePaystubTaxes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductions"]) -> typing.Union['EmployeePaystubDeductions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deposits"]) -> typing.Union['EmployeePaystubDeposits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["employeeId", "externalRecordId", "payPeriodFrom", "payPeriodTo", "payDate", "payorName", "payorAdd1", "payorAdd2", "payorCity", "payorState", "payorZip", "payeeName", "currencyCode", "net", "gross", "totalTaxes", "totalDeductions", "ytdNet", "ytdGross", "ytdTaxes", "ytdDeductions", "fedWitholding", "federalType", "twoJobs", "dependentsAmount", "otherIncome", "deductionsAmount", "stateWithholding", "localWithholding", "additionalFed", "additionalState", "additionalLocal", "taxState", "taxLocal", "wages", "taxes", "deductions", "deposits", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        externalRecordId: typing.Union[MetaOapg.properties.externalRecordId, str, schemas.Unset] = schemas.unset,
        payPeriodFrom: typing.Union[MetaOapg.properties.payPeriodFrom, str, schemas.Unset] = schemas.unset,
        payPeriodTo: typing.Union[MetaOapg.properties.payPeriodTo, str, schemas.Unset] = schemas.unset,
        payDate: typing.Union[MetaOapg.properties.payDate, str, schemas.Unset] = schemas.unset,
        payorName: typing.Union[MetaOapg.properties.payorName, str, schemas.Unset] = schemas.unset,
        payorAdd1: typing.Union[MetaOapg.properties.payorAdd1, str, schemas.Unset] = schemas.unset,
        payorAdd2: typing.Union[MetaOapg.properties.payorAdd2, str, schemas.Unset] = schemas.unset,
        payorCity: typing.Union[MetaOapg.properties.payorCity, str, schemas.Unset] = schemas.unset,
        payorState: typing.Union[MetaOapg.properties.payorState, str, schemas.Unset] = schemas.unset,
        payorZip: typing.Union[MetaOapg.properties.payorZip, str, schemas.Unset] = schemas.unset,
        payeeName: typing.Union[MetaOapg.properties.payeeName, str, schemas.Unset] = schemas.unset,
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
        net: typing.Union[MetaOapg.properties.net, str, schemas.Unset] = schemas.unset,
        gross: typing.Union[MetaOapg.properties.gross, str, schemas.Unset] = schemas.unset,
        totalTaxes: typing.Union[MetaOapg.properties.totalTaxes, str, schemas.Unset] = schemas.unset,
        totalDeductions: typing.Union[MetaOapg.properties.totalDeductions, str, schemas.Unset] = schemas.unset,
        ytdNet: typing.Union[MetaOapg.properties.ytdNet, str, schemas.Unset] = schemas.unset,
        ytdGross: typing.Union[MetaOapg.properties.ytdGross, str, schemas.Unset] = schemas.unset,
        ytdTaxes: typing.Union[MetaOapg.properties.ytdTaxes, str, schemas.Unset] = schemas.unset,
        ytdDeductions: typing.Union[MetaOapg.properties.ytdDeductions, str, schemas.Unset] = schemas.unset,
        fedWitholding: typing.Union[MetaOapg.properties.fedWitholding, str, schemas.Unset] = schemas.unset,
        federalType: typing.Union[MetaOapg.properties.federalType, str, schemas.Unset] = schemas.unset,
        twoJobs: typing.Union[MetaOapg.properties.twoJobs, str, schemas.Unset] = schemas.unset,
        dependentsAmount: typing.Union[MetaOapg.properties.dependentsAmount, str, schemas.Unset] = schemas.unset,
        otherIncome: typing.Union[MetaOapg.properties.otherIncome, str, schemas.Unset] = schemas.unset,
        deductionsAmount: typing.Union[MetaOapg.properties.deductionsAmount, str, schemas.Unset] = schemas.unset,
        stateWithholding: typing.Union[MetaOapg.properties.stateWithholding, str, schemas.Unset] = schemas.unset,
        localWithholding: typing.Union[MetaOapg.properties.localWithholding, str, schemas.Unset] = schemas.unset,
        additionalFed: typing.Union[MetaOapg.properties.additionalFed, str, schemas.Unset] = schemas.unset,
        additionalState: typing.Union[MetaOapg.properties.additionalState, str, schemas.Unset] = schemas.unset,
        additionalLocal: typing.Union[MetaOapg.properties.additionalLocal, str, schemas.Unset] = schemas.unset,
        taxState: typing.Union[MetaOapg.properties.taxState, str, schemas.Unset] = schemas.unset,
        taxLocal: typing.Union[MetaOapg.properties.taxLocal, str, schemas.Unset] = schemas.unset,
        wages: typing.Union['EmployeePaystubWages', schemas.Unset] = schemas.unset,
        taxes: typing.Union['EmployeePaystubTaxes', schemas.Unset] = schemas.unset,
        deductions: typing.Union['EmployeePaystubDeductions', schemas.Unset] = schemas.unset,
        deposits: typing.Union['EmployeePaystubDeposits', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeePaystub':
        return super().__new__(
            cls,
            *args,
            employeeId=employeeId,
            externalRecordId=externalRecordId,
            payPeriodFrom=payPeriodFrom,
            payPeriodTo=payPeriodTo,
            payDate=payDate,
            payorName=payorName,
            payorAdd1=payorAdd1,
            payorAdd2=payorAdd2,
            payorCity=payorCity,
            payorState=payorState,
            payorZip=payorZip,
            payeeName=payeeName,
            currencyCode=currencyCode,
            net=net,
            gross=gross,
            totalTaxes=totalTaxes,
            totalDeductions=totalDeductions,
            ytdNet=ytdNet,
            ytdGross=ytdGross,
            ytdTaxes=ytdTaxes,
            ytdDeductions=ytdDeductions,
            fedWitholding=fedWitholding,
            federalType=federalType,
            twoJobs=twoJobs,
            dependentsAmount=dependentsAmount,
            otherIncome=otherIncome,
            deductionsAmount=deductionsAmount,
            stateWithholding=stateWithholding,
            localWithholding=localWithholding,
            additionalFed=additionalFed,
            additionalState=additionalState,
            additionalLocal=additionalLocal,
            taxState=taxState,
            taxLocal=taxLocal,
            wages=wages,
            taxes=taxes,
            deductions=deductions,
            deposits=deposits,
            _configuration=_configuration,
            **kwargs,
        )

from bamboo_hr_python_sdk.model.employee_paystub_deductions import EmployeePaystubDeductions
from bamboo_hr_python_sdk.model.employee_paystub_deposits import EmployeePaystubDeposits
from bamboo_hr_python_sdk.model.employee_paystub_taxes import EmployeePaystubTaxes
from bamboo_hr_python_sdk.model.employee_paystub_wages import EmployeePaystubWages
