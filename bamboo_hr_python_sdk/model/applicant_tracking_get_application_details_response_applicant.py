# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class ApplicantTrackingGetApplicationDetailsResponseApplicant(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            email = schemas.StrSchema
            phoneNumber = schemas.StrSchema
        
            @staticmethod
            def address() -> typing.Type['ApplicantTrackingGetApplicationDetailsResponseApplicantAddress']:
                return ApplicantTrackingGetApplicationDetailsResponseApplicantAddress
            
            
            class linkedinUrl(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'linkedinUrl':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class websiteUrl(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'websiteUrl':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class availableStartDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'availableStartDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def education() -> typing.Type['ApplicantTrackingGetApplicationDetailsResponseApplicantEducation']:
                return ApplicantTrackingGetApplicationDetailsResponseApplicantEducation
            id = schemas.NumberSchema
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            
            
            class avatar(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'avatar':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "email": email,
                "phoneNumber": phoneNumber,
                "address": address,
                "linkedinUrl": linkedinUrl,
                "websiteUrl": websiteUrl,
                "availableStartDate": availableStartDate,
                "education": education,
                "id": id,
                "firstName": firstName,
                "lastName": lastName,
                "avatar": avatar,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumber"]) -> MetaOapg.properties.phoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'ApplicantTrackingGetApplicationDetailsResponseApplicantAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linkedinUrl"]) -> MetaOapg.properties.linkedinUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["websiteUrl"]) -> MetaOapg.properties.websiteUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableStartDate"]) -> MetaOapg.properties.availableStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["education"]) -> 'ApplicantTrackingGetApplicationDetailsResponseApplicantEducation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar"]) -> MetaOapg.properties.avatar: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["email", "phoneNumber", "address", "linkedinUrl", "websiteUrl", "availableStartDate", "education", "id", "firstName", "lastName", "avatar", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumber"]) -> typing.Union[MetaOapg.properties.phoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['ApplicantTrackingGetApplicationDetailsResponseApplicantAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linkedinUrl"]) -> typing.Union[MetaOapg.properties.linkedinUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["websiteUrl"]) -> typing.Union[MetaOapg.properties.websiteUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableStartDate"]) -> typing.Union[MetaOapg.properties.availableStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["education"]) -> typing.Union['ApplicantTrackingGetApplicationDetailsResponseApplicantEducation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar"]) -> typing.Union[MetaOapg.properties.avatar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["email", "phoneNumber", "address", "linkedinUrl", "websiteUrl", "availableStartDate", "education", "id", "firstName", "lastName", "avatar", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        phoneNumber: typing.Union[MetaOapg.properties.phoneNumber, str, schemas.Unset] = schemas.unset,
        address: typing.Union['ApplicantTrackingGetApplicationDetailsResponseApplicantAddress', schemas.Unset] = schemas.unset,
        linkedinUrl: typing.Union[MetaOapg.properties.linkedinUrl, None, str, schemas.Unset] = schemas.unset,
        websiteUrl: typing.Union[MetaOapg.properties.websiteUrl, None, str, schemas.Unset] = schemas.unset,
        availableStartDate: typing.Union[MetaOapg.properties.availableStartDate, None, str, schemas.Unset] = schemas.unset,
        education: typing.Union['ApplicantTrackingGetApplicationDetailsResponseApplicantEducation', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        avatar: typing.Union[MetaOapg.properties.avatar, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplicantTrackingGetApplicationDetailsResponseApplicant':
        return super().__new__(
            cls,
            *args,
            email=email,
            phoneNumber=phoneNumber,
            address=address,
            linkedinUrl=linkedinUrl,
            websiteUrl=websiteUrl,
            availableStartDate=availableStartDate,
            education=education,
            id=id,
            firstName=firstName,
            lastName=lastName,
            avatar=avatar,
            _configuration=_configuration,
            **kwargs,
        )

from bamboo_hr_python_sdk.model.applicant_tracking_get_application_details_response_applicant_address import ApplicantTrackingGetApplicationDetailsResponseApplicantAddress
from bamboo_hr_python_sdk.model.applicant_tracking_get_application_details_response_applicant_education import ApplicantTrackingGetApplicationDetailsResponseApplicantEducation
