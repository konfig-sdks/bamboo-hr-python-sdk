# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class GoalsGetAllAggregateInfo200Response1GoalsItemMilestonesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An individual milestone.
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            id = schemas.IntSchema
            employeeGoalId = schemas.IntSchema
            currentValue = schemas.NumberSchema
            startValue = schemas.NumberSchema
            endValue = schemas.NumberSchema
            completedDateTime = schemas.StrSchema
            lastUpdateDateDateTime = schemas.StrSchema
            lastUpdateUserId = schemas.IntSchema
            __annotations__ = {
                "title": title,
                "id": id,
                "employeeGoalId": employeeGoalId,
                "currentValue": currentValue,
                "startValue": startValue,
                "endValue": endValue,
                "completedDateTime": completedDateTime,
                "lastUpdateDateDateTime": lastUpdateDateDateTime,
                "lastUpdateUserId": lastUpdateUserId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeGoalId"]) -> MetaOapg.properties.employeeGoalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentValue"]) -> MetaOapg.properties.currentValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startValue"]) -> MetaOapg.properties.startValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endValue"]) -> MetaOapg.properties.endValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completedDateTime"]) -> MetaOapg.properties.completedDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdateDateDateTime"]) -> MetaOapg.properties.lastUpdateDateDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdateUserId"]) -> MetaOapg.properties.lastUpdateUserId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "employeeGoalId", "currentValue", "startValue", "endValue", "completedDateTime", "lastUpdateDateDateTime", "lastUpdateUserId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeGoalId"]) -> typing.Union[MetaOapg.properties.employeeGoalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentValue"]) -> typing.Union[MetaOapg.properties.currentValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startValue"]) -> typing.Union[MetaOapg.properties.startValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endValue"]) -> typing.Union[MetaOapg.properties.endValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completedDateTime"]) -> typing.Union[MetaOapg.properties.completedDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdateDateDateTime"]) -> typing.Union[MetaOapg.properties.lastUpdateDateDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdateUserId"]) -> typing.Union[MetaOapg.properties.lastUpdateUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "employeeGoalId", "currentValue", "startValue", "endValue", "completedDateTime", "lastUpdateDateDateTime", "lastUpdateUserId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        employeeGoalId: typing.Union[MetaOapg.properties.employeeGoalId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currentValue: typing.Union[MetaOapg.properties.currentValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        startValue: typing.Union[MetaOapg.properties.startValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        endValue: typing.Union[MetaOapg.properties.endValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        completedDateTime: typing.Union[MetaOapg.properties.completedDateTime, str, schemas.Unset] = schemas.unset,
        lastUpdateDateDateTime: typing.Union[MetaOapg.properties.lastUpdateDateDateTime, str, schemas.Unset] = schemas.unset,
        lastUpdateUserId: typing.Union[MetaOapg.properties.lastUpdateUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GoalsGetAllAggregateInfo200Response1GoalsItemMilestonesItem':
        return super().__new__(
            cls,
            *args,
            title=title,
            id=id,
            employeeGoalId=employeeGoalId,
            currentValue=currentValue,
            startValue=startValue,
            endValue=endValue,
            completedDateTime=completedDateTime,
            lastUpdateDateDateTime=lastUpdateDateDateTime,
            lastUpdateUserId=lastUpdateUserId,
            _configuration=_configuration,
            **kwargs,
        )
