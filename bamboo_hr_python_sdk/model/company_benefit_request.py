# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class CompanyBenefitRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            companyBenefitName = schemas.StrSchema
            benefitVendorId = schemas.StrSchema
            
            
            class benefitType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "health": "HEALTH",
                        "dental": "DENTAL",
                        "vision": "VISION",
                        "retirement": "RETIREMENT",
                        "hsa": "HSA",
                        "flex": "FLEX",
                        "life": "LIFE",
                        "disability": "DISABILITY",
                        "reimbursement": "REIMBURSEMENT",
                        "supplemental": "SUPPLEMENTAL",
                        "other": "OTHER",
                    }
                
                @schemas.classproperty
                def HEALTH(cls):
                    return cls("health")
                
                @schemas.classproperty
                def DENTAL(cls):
                    return cls("dental")
                
                @schemas.classproperty
                def VISION(cls):
                    return cls("vision")
                
                @schemas.classproperty
                def RETIREMENT(cls):
                    return cls("retirement")
                
                @schemas.classproperty
                def HSA(cls):
                    return cls("hsa")
                
                @schemas.classproperty
                def FLEX(cls):
                    return cls("flex")
                
                @schemas.classproperty
                def LIFE(cls):
                    return cls("life")
                
                @schemas.classproperty
                def DISABILITY(cls):
                    return cls("disability")
                
                @schemas.classproperty
                def REIMBURSEMENT(cls):
                    return cls("reimbursement")
                
                @schemas.classproperty
                def SUPPLEMENTAL(cls):
                    return cls("supplemental")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
            deductionTypeId = schemas.StrSchema
            startDate = schemas.DateSchema
            endDate = schemas.DateSchema
            planUrl = schemas.StrSchema
            ssoLoginUrl = schemas.StrSchema
            ssoLoginUrlLinkText = schemas.StrSchema
            safeHarbor = schemas.BoolSchema
            meetAcaMin = schemas.BoolSchema
            reimbursementAmount = schemas.NumberSchema
            
            
            class reimbursementFrequency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "pay period": "PAY_PERIOD",
                        "month": "MONTH",
                        "quarter": "QUARTER",
                        "year": "YEAR",
                        "one time": "ONE_TIME",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def PAY_PERIOD(cls):
                    return cls("pay period")
                
                @schemas.classproperty
                def MONTH(cls):
                    return cls("month")
                
                @schemas.classproperty
                def QUARTER(cls):
                    return cls("quarter")
                
                @schemas.classproperty
                def YEAR(cls):
                    return cls("year")
                
                @schemas.classproperty
                def ONE_TIME(cls):
                    return cls("one time")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            reimbursementCurrencyCode = schemas.StrSchema
            minEssentialCoverage = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "companyBenefitName": companyBenefitName,
                "benefitVendorId": benefitVendorId,
                "benefitType": benefitType,
                "deductionTypeId": deductionTypeId,
                "startDate": startDate,
                "endDate": endDate,
                "planUrl": planUrl,
                "ssoLoginUrl": ssoLoginUrl,
                "ssoLoginUrlLinkText": ssoLoginUrlLinkText,
                "safeHarbor": safeHarbor,
                "meetAcaMin": meetAcaMin,
                "reimbursementAmount": reimbursementAmount,
                "reimbursementFrequency": reimbursementFrequency,
                "reimbursementCurrencyCode": reimbursementCurrencyCode,
                "minEssentialCoverage": minEssentialCoverage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyBenefitName"]) -> MetaOapg.properties.companyBenefitName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitVendorId"]) -> MetaOapg.properties.benefitVendorId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitType"]) -> MetaOapg.properties.benefitType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionTypeId"]) -> MetaOapg.properties.deductionTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planUrl"]) -> MetaOapg.properties.planUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssoLoginUrl"]) -> MetaOapg.properties.ssoLoginUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssoLoginUrlLinkText"]) -> MetaOapg.properties.ssoLoginUrlLinkText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["safeHarbor"]) -> MetaOapg.properties.safeHarbor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meetAcaMin"]) -> MetaOapg.properties.meetAcaMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reimbursementAmount"]) -> MetaOapg.properties.reimbursementAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reimbursementFrequency"]) -> MetaOapg.properties.reimbursementFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reimbursementCurrencyCode"]) -> MetaOapg.properties.reimbursementCurrencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minEssentialCoverage"]) -> MetaOapg.properties.minEssentialCoverage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "companyBenefitName", "benefitVendorId", "benefitType", "deductionTypeId", "startDate", "endDate", "planUrl", "ssoLoginUrl", "ssoLoginUrlLinkText", "safeHarbor", "meetAcaMin", "reimbursementAmount", "reimbursementFrequency", "reimbursementCurrencyCode", "minEssentialCoverage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyBenefitName"]) -> typing.Union[MetaOapg.properties.companyBenefitName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitVendorId"]) -> typing.Union[MetaOapg.properties.benefitVendorId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitType"]) -> typing.Union[MetaOapg.properties.benefitType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionTypeId"]) -> typing.Union[MetaOapg.properties.deductionTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planUrl"]) -> typing.Union[MetaOapg.properties.planUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssoLoginUrl"]) -> typing.Union[MetaOapg.properties.ssoLoginUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssoLoginUrlLinkText"]) -> typing.Union[MetaOapg.properties.ssoLoginUrlLinkText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["safeHarbor"]) -> typing.Union[MetaOapg.properties.safeHarbor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meetAcaMin"]) -> typing.Union[MetaOapg.properties.meetAcaMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reimbursementAmount"]) -> typing.Union[MetaOapg.properties.reimbursementAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reimbursementFrequency"]) -> typing.Union[MetaOapg.properties.reimbursementFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reimbursementCurrencyCode"]) -> typing.Union[MetaOapg.properties.reimbursementCurrencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minEssentialCoverage"]) -> typing.Union[MetaOapg.properties.minEssentialCoverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "companyBenefitName", "benefitVendorId", "benefitType", "deductionTypeId", "startDate", "endDate", "planUrl", "ssoLoginUrl", "ssoLoginUrlLinkText", "safeHarbor", "meetAcaMin", "reimbursementAmount", "reimbursementFrequency", "reimbursementCurrencyCode", "minEssentialCoverage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        companyBenefitName: typing.Union[MetaOapg.properties.companyBenefitName, str, schemas.Unset] = schemas.unset,
        benefitVendorId: typing.Union[MetaOapg.properties.benefitVendorId, str, schemas.Unset] = schemas.unset,
        benefitType: typing.Union[MetaOapg.properties.benefitType, str, schemas.Unset] = schemas.unset,
        deductionTypeId: typing.Union[MetaOapg.properties.deductionTypeId, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, date, schemas.Unset] = schemas.unset,
        planUrl: typing.Union[MetaOapg.properties.planUrl, str, schemas.Unset] = schemas.unset,
        ssoLoginUrl: typing.Union[MetaOapg.properties.ssoLoginUrl, str, schemas.Unset] = schemas.unset,
        ssoLoginUrlLinkText: typing.Union[MetaOapg.properties.ssoLoginUrlLinkText, str, schemas.Unset] = schemas.unset,
        safeHarbor: typing.Union[MetaOapg.properties.safeHarbor, bool, schemas.Unset] = schemas.unset,
        meetAcaMin: typing.Union[MetaOapg.properties.meetAcaMin, bool, schemas.Unset] = schemas.unset,
        reimbursementAmount: typing.Union[MetaOapg.properties.reimbursementAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        reimbursementFrequency: typing.Union[MetaOapg.properties.reimbursementFrequency, str, schemas.Unset] = schemas.unset,
        reimbursementCurrencyCode: typing.Union[MetaOapg.properties.reimbursementCurrencyCode, str, schemas.Unset] = schemas.unset,
        minEssentialCoverage: typing.Union[MetaOapg.properties.minEssentialCoverage, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompanyBenefitRequest':
        return super().__new__(
            cls,
            *args,
            description=description,
            companyBenefitName=companyBenefitName,
            benefitVendorId=benefitVendorId,
            benefitType=benefitType,
            deductionTypeId=deductionTypeId,
            startDate=startDate,
            endDate=endDate,
            planUrl=planUrl,
            ssoLoginUrl=ssoLoginUrl,
            ssoLoginUrlLinkText=ssoLoginUrlLinkText,
            safeHarbor=safeHarbor,
            meetAcaMin=meetAcaMin,
            reimbursementAmount=reimbursementAmount,
            reimbursementFrequency=reimbursementFrequency,
            reimbursementCurrencyCode=reimbursementCurrencyCode,
            minEssentialCoverage=minEssentialCoverage,
            _configuration=_configuration,
            **kwargs,
        )
