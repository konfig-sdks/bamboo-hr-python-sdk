# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class CompanyBenefitType(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            slug = schemas.StrSchema
            canBeAcaPlan = schemas.BoolSchema
            canCoExistEnrollment = schemas.BoolSchema
            isReimbursementPlan = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "slug": slug,
                "canBeAcaPlan": canBeAcaPlan,
                "canCoExistEnrollment": canCoExistEnrollment,
                "isReimbursementPlan": isReimbursementPlan,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canBeAcaPlan"]) -> MetaOapg.properties.canBeAcaPlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canCoExistEnrollment"]) -> MetaOapg.properties.canCoExistEnrollment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isReimbursementPlan"]) -> MetaOapg.properties.isReimbursementPlan: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "slug", "canBeAcaPlan", "canCoExistEnrollment", "isReimbursementPlan", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canBeAcaPlan"]) -> typing.Union[MetaOapg.properties.canBeAcaPlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canCoExistEnrollment"]) -> typing.Union[MetaOapg.properties.canCoExistEnrollment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isReimbursementPlan"]) -> typing.Union[MetaOapg.properties.isReimbursementPlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "slug", "canBeAcaPlan", "canCoExistEnrollment", "isReimbursementPlan", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
        canBeAcaPlan: typing.Union[MetaOapg.properties.canBeAcaPlan, bool, schemas.Unset] = schemas.unset,
        canCoExistEnrollment: typing.Union[MetaOapg.properties.canCoExistEnrollment, bool, schemas.Unset] = schemas.unset,
        isReimbursementPlan: typing.Union[MetaOapg.properties.isReimbursementPlan, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CompanyBenefitType':
        return super().__new__(
            cls,
            *args,
            name=name,
            slug=slug,
            canBeAcaPlan=canBeAcaPlan,
            canCoExistEnrollment=canCoExistEnrollment,
            isReimbursementPlan=isReimbursementPlan,
            _configuration=_configuration,
            **kwargs,
        )
