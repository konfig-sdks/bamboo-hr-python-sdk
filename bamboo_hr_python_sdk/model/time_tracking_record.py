# coding: utf-8

"""
    BambooHR API

    This is the majority of the API requests including some that are not documented.  http://www.bamboohr.com/api/documentation/

    The version of the OpenAPI document: v1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bamboo_hr_python_sdk import schemas  # noqa: F401


class TimeTrackingRecord(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "rateType",
            "timeTrackingId",
            "employeeId",
            "hoursWorked",
            "dateHoursWorked",
        }
        
        class properties:
            
            
            class timeTrackingId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
            employeeId = schemas.IntSchema
            dateHoursWorked = schemas.StrSchema
            rateType = schemas.StrSchema
            hoursWorked = schemas.Float32Schema
            divisionId = schemas.IntSchema
            departmentId = schemas.IntSchema
            jobTitleId = schemas.IntSchema
            
            
            class payCode(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
            payRate = schemas.Float32Schema
            jobCode = schemas.IntSchema
            jobData = schemas.StrSchema
            __annotations__ = {
                "timeTrackingId": timeTrackingId,
                "employeeId": employeeId,
                "dateHoursWorked": dateHoursWorked,
                "rateType": rateType,
                "hoursWorked": hoursWorked,
                "divisionId": divisionId,
                "departmentId": departmentId,
                "jobTitleId": jobTitleId,
                "payCode": payCode,
                "payRate": payRate,
                "jobCode": jobCode,
                "jobData": jobData,
            }
    
    rateType: MetaOapg.properties.rateType
    timeTrackingId: MetaOapg.properties.timeTrackingId
    employeeId: MetaOapg.properties.employeeId
    hoursWorked: MetaOapg.properties.hoursWorked
    dateHoursWorked: MetaOapg.properties.dateHoursWorked
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeTrackingId"]) -> MetaOapg.properties.timeTrackingId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateHoursWorked"]) -> MetaOapg.properties.dateHoursWorked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateType"]) -> MetaOapg.properties.rateType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hoursWorked"]) -> MetaOapg.properties.hoursWorked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["divisionId"]) -> MetaOapg.properties.divisionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentId"]) -> MetaOapg.properties.departmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTitleId"]) -> MetaOapg.properties.jobTitleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payCode"]) -> MetaOapg.properties.payCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payRate"]) -> MetaOapg.properties.payRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobCode"]) -> MetaOapg.properties.jobCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobData"]) -> MetaOapg.properties.jobData: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timeTrackingId", "employeeId", "dateHoursWorked", "rateType", "hoursWorked", "divisionId", "departmentId", "jobTitleId", "payCode", "payRate", "jobCode", "jobData", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeTrackingId"]) -> MetaOapg.properties.timeTrackingId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateHoursWorked"]) -> MetaOapg.properties.dateHoursWorked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateType"]) -> MetaOapg.properties.rateType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hoursWorked"]) -> MetaOapg.properties.hoursWorked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["divisionId"]) -> typing.Union[MetaOapg.properties.divisionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentId"]) -> typing.Union[MetaOapg.properties.departmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTitleId"]) -> typing.Union[MetaOapg.properties.jobTitleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payCode"]) -> typing.Union[MetaOapg.properties.payCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payRate"]) -> typing.Union[MetaOapg.properties.payRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobCode"]) -> typing.Union[MetaOapg.properties.jobCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobData"]) -> typing.Union[MetaOapg.properties.jobData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timeTrackingId", "employeeId", "dateHoursWorked", "rateType", "hoursWorked", "divisionId", "departmentId", "jobTitleId", "payCode", "payRate", "jobCode", "jobData", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        rateType: typing.Union[MetaOapg.properties.rateType, str, ],
        timeTrackingId: typing.Union[MetaOapg.properties.timeTrackingId, str, ],
        employeeId: typing.Union[MetaOapg.properties.employeeId, decimal.Decimal, int, ],
        hoursWorked: typing.Union[MetaOapg.properties.hoursWorked, decimal.Decimal, int, float, ],
        dateHoursWorked: typing.Union[MetaOapg.properties.dateHoursWorked, str, ],
        divisionId: typing.Union[MetaOapg.properties.divisionId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        departmentId: typing.Union[MetaOapg.properties.departmentId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        jobTitleId: typing.Union[MetaOapg.properties.jobTitleId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payCode: typing.Union[MetaOapg.properties.payCode, str, schemas.Unset] = schemas.unset,
        payRate: typing.Union[MetaOapg.properties.payRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        jobCode: typing.Union[MetaOapg.properties.jobCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        jobData: typing.Union[MetaOapg.properties.jobData, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeTrackingRecord':
        return super().__new__(
            cls,
            *args,
            rateType=rateType,
            timeTrackingId=timeTrackingId,
            employeeId=employeeId,
            hoursWorked=hoursWorked,
            dateHoursWorked=dateHoursWorked,
            divisionId=divisionId,
            departmentId=departmentId,
            jobTitleId=jobTitleId,
            payCode=payCode,
            payRate=payRate,
            jobCode=jobCode,
            jobData=jobData,
            _configuration=_configuration,
            **kwargs,
        )
